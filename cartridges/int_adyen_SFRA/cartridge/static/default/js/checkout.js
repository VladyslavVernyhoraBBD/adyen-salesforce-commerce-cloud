/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./cartridges/int_adyen_SFRA/cartridge/client/default/js/checkout.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js":
/*!***************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Populate the Billing Address Summary View\n * @param {string} parentSelector - the top level DOM selector for a unique address summary\n * @param {Object} address - the address data\n */\nfunction populateAddressSummary(parentSelector, address) {\n    $.each(address, function (attr) {\n        var val = address[attr];\n        $('.' + attr, parentSelector).text(val || '');\n    });\n}\n\n/**\n * returns a formed <option /> element\n * @param {Object} shipping - the shipping object (shipment model)\n * @param {boolean} selected - current shipping is selected (for PLI)\n * @param {order} order - the Order model\n * @param {Object} [options] - options\n * @returns {Object} - the jQuery / DOMElement\n */\nfunction optionValueForAddress(shipping, selected, order, options) {\n    var safeOptions = options || {};\n    var isBilling = safeOptions.type && safeOptions.type === 'billing';\n    var className = safeOptions.className || '';\n    var isSelected = selected;\n    var isNew = !shipping;\n    if (typeof shipping === 'string') {\n        return $('<option class=\"' + className + '\" disabled>' + shipping + '</option>');\n    }\n    var safeShipping = shipping || {};\n    var shippingAddress = safeShipping.shippingAddress || {};\n\n    if (isBilling && isNew && !order.billing.matchingAddressId) {\n        shippingAddress = order.billing.billingAddress.address || {};\n        isNew = false;\n        isSelected = true;\n        safeShipping.UUID = 'manual-entry';\n    }\n\n    var uuid = safeShipping.UUID ? safeShipping.UUID : 'new';\n    var optionEl = $('<option class=\"' + className + '\" />');\n    optionEl.val(uuid);\n\n    var title;\n\n    if (isNew) {\n        title = order.resources.addNewAddress;\n    } else {\n        title = [];\n        if (shippingAddress.firstName) {\n            title.push(shippingAddress.firstName);\n        }\n        if (shippingAddress.lastName) {\n            title.push(shippingAddress.lastName);\n        }\n        if (shippingAddress.address1) {\n            title.push(shippingAddress.address1);\n        }\n        if (shippingAddress.address2) {\n            title.push(shippingAddress.address2);\n        }\n        if (shippingAddress.city) {\n            if (shippingAddress.state) {\n                title.push(shippingAddress.city + ',');\n            } else {\n                title.push(shippingAddress.city);\n            }\n        }\n        if (shippingAddress.stateCode) {\n            title.push(shippingAddress.stateCode);\n        }\n        if (shippingAddress.postalCode) {\n            title.push(shippingAddress.postalCode);\n        }\n        if (!isBilling && safeShipping.selectedShippingMethod) {\n            title.push('-');\n            title.push(safeShipping.selectedShippingMethod.displayName);\n        }\n\n        if (title.length > 2) {\n            title = title.join(' ');\n        } else {\n            title = order.resources.newAddress;\n        }\n    }\n    optionEl.text(title);\n\n    var keyMap = {\n        'data-first-name': 'firstName',\n        'data-last-name': 'lastName',\n        'data-address1': 'address1',\n        'data-address2': 'address2',\n        'data-city': 'city',\n        'data-state-code': 'stateCode',\n        'data-postal-code': 'postalCode',\n        'data-country-code': 'countryCode',\n        'data-phone': 'phone'\n    };\n    $.each(keyMap, function (key) {\n        var mappedKey = keyMap[key];\n        var mappedValue = shippingAddress[mappedKey];\n        // In case of country code\n        if (mappedValue && typeof mappedValue === 'object') {\n            mappedValue = mappedValue.value;\n        }\n\n        optionEl.attr(key, mappedValue || '');\n    });\n\n    var giftObj = {\n        'data-is-gift': 'isGift',\n        'data-gift-message': 'giftMessage'\n    };\n\n    $.each(giftObj, function (key) {\n        var mappedKey = giftObj[key];\n        var mappedValue = safeShipping[mappedKey];\n        optionEl.attr(key, mappedValue || '');\n    });\n\n    if (isSelected) {\n        optionEl.attr('selected', true);\n    }\n\n    return optionEl;\n}\n\n/**\n * returns address properties from a UI form\n * @param {Form} form - the Form element\n * @returns {Object} - a JSON object with all values\n */\nfunction getAddressFieldsFromUI(form) {\n    var address = {\n        firstName: $('input[name$=_firstName]', form).val(),\n        lastName: $('input[name$=_lastName]', form).val(),\n        address1: $('input[name$=_address1]', form).val(),\n        address2: $('input[name$=_address2]', form).val(),\n        city: $('input[name$=_city]', form).val(),\n        postalCode: $('input[name$=_postalCode]', form).val(),\n        stateCode: $('select[name$=_stateCode],input[name$=_stateCode]', form).val(),\n        countryCode: $('select[name$=_country]', form).val(),\n        phone: $('input[name$=_phone]', form).val()\n    };\n    return address;\n}\n\nmodule.exports = {\n    methods: {\n        populateAddressSummary: populateAddressSummary,\n        optionValueForAddress: optionValueForAddress,\n        getAddressFieldsFromUI: getAddressFieldsFromUI\n    },\n\n    showDetails: function () {\n        $('.btn-show-details').on('click', function () {\n            var form = $(this).closest('form');\n\n            form.attr('data-address-mode', 'details');\n            form.find('.multi-ship-address-actions').removeClass('d-none');\n            form.find('.multi-ship-action-buttons .col-12.btn-save-multi-ship').addClass('d-none');\n        });\n    },\n\n    addNewAddress: function () {\n        $('.btn-add-new').on('click', function () {\n            var $el = $(this);\n            if ($el.parents('#dwfrm_billing').length > 0) {\n                // Handle billing address case\n                $('body').trigger('checkout:clearBillingForm');\n                var $option = $($el.parents('form').find('.addressSelector option')[0]);\n                $option.attr('value', 'new');\n                var $newTitle = $('#dwfrm_billing input[name=localizedNewAddressTitle]').val();\n                $option.text($newTitle);\n                $option.prop('selected', 'selected');\n                $el.parents('[data-address-mode]').attr('data-address-mode', 'new');\n            } else {\n                // Handle shipping address case\n                var $newEl = $el.parents('form').find('.addressSelector option[value=new]');\n                $newEl.prop('selected', 'selected');\n                $newEl.parent().trigger('change');\n            }\n        });\n    }\n};\n\n\n//# sourceURL=webpack:///../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js?");

/***/ }),

/***/ "../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/billing.js":
/*!***************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/billing.js ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar addressHelpers = __webpack_require__(/*! ./address */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js\");\nvar cleave = __webpack_require__(/*! ../components/cleave */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/components/cleave.js\");\n\n/**\n * updates the billing address selector within billing forms\n * @param {Object} order - the order model\n * @param {Object} customer - the customer model\n */\nfunction updateBillingAddressSelector(order, customer) {\n    var shippings = order.shipping;\n\n    var form = $('form[name$=billing]')[0];\n    var $billingAddressSelector = $('.addressSelector', form);\n    var hasSelectedAddress = false;\n\n    if ($billingAddressSelector && $billingAddressSelector.length === 1) {\n        $billingAddressSelector.empty();\n        // Add New Address option\n        $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n            null,\n            false,\n            order,\n            { type: 'billing' }));\n\n        // Separator -\n        $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n            order.resources.shippingAddresses, false, order, {\n                // className: 'multi-shipping',\n                type: 'billing'\n            }\n        ));\n\n        shippings.forEach(function (aShipping) {\n            var isSelected = order.billing.matchingAddressId === aShipping.UUID;\n            hasSelectedAddress = hasSelectedAddress || isSelected;\n            // Shipping Address option\n            $billingAddressSelector.append(\n                addressHelpers.methods.optionValueForAddress(aShipping, isSelected, order,\n                    {\n                        // className: 'multi-shipping',\n                        type: 'billing'\n                    }\n                )\n            );\n        });\n\n        if (customer.addresses && customer.addresses.length > 0) {\n            $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n                order.resources.accountAddresses, false, order));\n            customer.addresses.forEach(function (address) {\n                var isSelected = order.billing.matchingAddressId === address.ID;\n                hasSelectedAddress = hasSelectedAddress || isSelected;\n                // Customer Address option\n                $billingAddressSelector.append(\n                    addressHelpers.methods.optionValueForAddress({\n                        UUID: 'ab_' + address.ID,\n                        shippingAddress: address\n                    }, isSelected, order, { type: 'billing' })\n                );\n            });\n        }\n    }\n\n    if (hasSelectedAddress\n        || (!order.billing.matchingAddressId && order.billing.billingAddress.address)) {\n        // show\n        $(form).attr('data-address-mode', 'edit');\n    } else {\n        $(form).attr('data-address-mode', 'new');\n    }\n\n    $billingAddressSelector.show();\n}\n\n/**\n * updates the billing address form values within payment forms\n * @param {Object} order - the order model\n */\nfunction updateBillingAddressFormValues(order) {\n    var billing = order.billing;\n    if (!billing.billingAddress || !billing.billingAddress.address) return;\n\n    var form = $('form[name=dwfrm_billing]');\n    if (!form) return;\n\n    $('input[name$=_firstName]', form).val(billing.billingAddress.address.firstName);\n    $('input[name$=_lastName]', form).val(billing.billingAddress.address.lastName);\n    $('input[name$=_address1]', form).val(billing.billingAddress.address.address1);\n    $('input[name$=_address2]', form).val(billing.billingAddress.address.address2);\n    $('input[name$=_city]', form).val(billing.billingAddress.address.city);\n    $('input[name$=_postalCode]', form).val(billing.billingAddress.address.postalCode);\n    $('select[name$=_stateCode],input[name$=_stateCode]', form)\n        .val(billing.billingAddress.address.stateCode);\n    $('select[name$=_country]', form).val(billing.billingAddress.address.countryCode.value);\n    $('input[name$=_phone]', form).val(billing.billingAddress.address.phone);\n    $('input[name$=_email]', form).val(order.orderEmail);\n\n    if (billing.payment && billing.payment.selectedPaymentInstruments\n        && billing.payment.selectedPaymentInstruments.length > 0) {\n        var instrument = billing.payment.selectedPaymentInstruments[0];\n        $('select[name$=expirationMonth]', form).val(instrument.expirationMonth);\n        $('select[name$=expirationYear]', form).val(instrument.expirationYear);\n        // Force security code and card number clear\n        $('input[name$=securityCode]', form).val('');\n        $('input[name$=cardNumber]').data('cleave').setRawValue('');\n    }\n}\n\n/**\n * clears the billing address form values\n */\nfunction clearBillingAddressFormValues() {\n    updateBillingAddressFormValues({\n        billing: {\n            billingAddress: {\n                address: {\n                    countryCode: {}\n                }\n            }\n        }\n    });\n}\n\n/**\n * Updates the billing information in checkout, based on the supplied order model\n * @param {Object} order - checkout model to use as basis of new truth\n * @param {Object} customer - customer model to use as basis of new truth\n * @param {Object} [options] - options\n */\nfunction updateBillingInformation(order, customer) {\n    updateBillingAddressSelector(order, customer);\n\n    // update billing address form\n    updateBillingAddressFormValues(order);\n\n    // update billing address summary\n    addressHelpers.methods.populateAddressSummary('.billing .address-summary',\n        order.billing.billingAddress.address);\n\n    // update billing parts of order summary\n    $('.order-summary-email').text(order.orderEmail);\n\n    if (order.billing.billingAddress.address) {\n        $('.order-summary-phone').text(order.billing.billingAddress.address.phone);\n    }\n}\n\n/**\n * Updates the payment information in checkout, based on the supplied order model\n * @param {Object} order - checkout model to use as basis of new truth\n */\nfunction updatePaymentInformation(order) {\n    // update payment details\n    var $paymentSummary = $('.payment-details');\n    var htmlToAppend = '';\n\n    if (order.billing.payment && order.billing.payment.selectedPaymentInstruments\n        && order.billing.payment.selectedPaymentInstruments.length > 0) {\n        htmlToAppend += '<span>' + order.resources.cardType + ' '\n            + order.billing.payment.selectedPaymentInstruments[0].type\n            + '</span><div>'\n            + order.billing.payment.selectedPaymentInstruments[0].maskedCreditCardNumber\n            + '</div><div><span>'\n            + order.resources.cardEnding + ' '\n            + order.billing.payment.selectedPaymentInstruments[0].expirationMonth\n            + '/' + order.billing.payment.selectedPaymentInstruments[0].expirationYear\n            + '</span></div>';\n    }\n\n    $paymentSummary.empty().append(htmlToAppend);\n}\n\n/**\n * clears the credit card form\n */\nfunction clearCreditCardForm() {\n    $('input[name$=\"_cardNumber\"]').data('cleave').setRawValue('');\n    $('select[name$=\"_expirationMonth\"]').val('');\n    $('select[name$=\"_expirationYear\"]').val('');\n    $('input[name$=\"_securityCode\"]').val('');\n}\n\nmodule.exports = {\n    methods: {\n        updateBillingAddressSelector: updateBillingAddressSelector,\n        updateBillingAddressFormValues: updateBillingAddressFormValues,\n        clearBillingAddressFormValues: clearBillingAddressFormValues,\n        updateBillingInformation: updateBillingInformation,\n        updatePaymentInformation: updatePaymentInformation,\n        clearCreditCardForm: clearCreditCardForm\n    },\n\n    showBillingDetails: function () {\n        $('.btn-show-billing-details').on('click', function () {\n            $(this).parents('[data-address-mode]').attr('data-address-mode', 'new');\n        });\n    },\n\n    hideBillingDetails: function () {\n        $('.btn-hide-billing-details').on('click', function () {\n            $(this).parents('[data-address-mode]').attr('data-address-mode', 'shipment');\n        });\n    },\n\n    selectBillingAddress: function () {\n        $('.payment-form .addressSelector').on('change', function () {\n            var form = $(this).parents('form')[0];\n            var selectedOption = $('option:selected', this);\n            var optionID = selectedOption[0].value;\n\n            if (optionID === 'new') {\n                // Show Address\n                $(form).attr('data-address-mode', 'new');\n            } else {\n                // Hide Address\n                $(form).attr('data-address-mode', 'shipment');\n            }\n\n            // Copy fields\n            var attrs = selectedOption.data();\n            var element;\n\n            Object.keys(attrs).forEach(function (attr) {\n                element = attr === 'countryCode' ? 'country' : attr;\n                if (element === 'cardNumber') {\n                    $('.cardNumber').data('cleave').setRawValue(attrs[attr]);\n                } else {\n                    $('[name$=' + element + ']', form).val(attrs[attr]);\n                }\n            });\n        });\n    },\n\n    handleCreditCardNumber: function () {\n        cleave.handleCreditCardNumber('.cardNumber', '#cardType');\n    },\n\n    santitizeForm: function () {\n        $('body').on('checkout:serializeBilling', function (e, data) {\n            var serializedForm = cleave.serializeData(data.form);\n\n            data.callback(serializedForm);\n        });\n    },\n\n    selectSavedPaymentInstrument: function () {\n        $(document).on('click', '.saved-payment-instrument', function (e) {\n            e.preventDefault();\n            $('.saved-payment-security-code').val('');\n            $('.saved-payment-instrument').removeClass('selected-payment');\n            $(this).addClass('selected-payment');\n            $('.saved-payment-instrument .card-image').removeClass('checkout-hidden');\n            $('.saved-payment-instrument .security-code-input').addClass('checkout-hidden');\n            $('.saved-payment-instrument.selected-payment' +\n                ' .card-image').addClass('checkout-hidden');\n            $('.saved-payment-instrument.selected-payment ' +\n                '.security-code-input').removeClass('checkout-hidden');\n        });\n    },\n\n    addNewPaymentInstrument: function () {\n        $('.btn.add-payment').on('click', function (e) {\n            e.preventDefault();\n            $('.payment-information').data('is-new-payment', true);\n            clearCreditCardForm();\n            $('.credit-card-form').removeClass('checkout-hidden');\n            $('.user-payment-instruments').addClass('checkout-hidden');\n        });\n    },\n\n    cancelNewPayment: function () {\n        $('.cancel-new-payment').on('click', function (e) {\n            e.preventDefault();\n            $('.payment-information').data('is-new-payment', false);\n            clearCreditCardForm();\n            $('.user-payment-instruments').removeClass('checkout-hidden');\n            $('.credit-card-form').addClass('checkout-hidden');\n        });\n    },\n\n    clearBillingForm: function () {\n        $('body').on('checkout:clearBillingForm', function () {\n            clearBillingAddressFormValues();\n        });\n    },\n\n    paymentTabs: function () {\n        $('.payment-options .nav-item').on('click', function (e) {\n            e.preventDefault();\n            var methodID = $(this).data('method-id');\n            $('.payment-information').data('payment-method-id', methodID);\n        });\n    }\n};\n\n\n//# sourceURL=webpack:///../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/billing.js?");

/***/ }),

/***/ "../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/checkout.js":
/*!****************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/checkout.js ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar addressHelpers = __webpack_require__(/*! ./address */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js\");\nvar shippingHelpers = __webpack_require__(/*! ./shipping */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/shipping.js\");\nvar billingHelpers = __webpack_require__(/*! ./billing */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/billing.js\");\nvar summaryHelpers = __webpack_require__(/*! ./summary */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/summary.js\");\nvar formHelpers = __webpack_require__(/*! ./formErrors */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js\");\nvar scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js\");\n\n\n/**\n * Create the jQuery Checkout Plugin.\n *\n * This jQuery plugin will be registered on the dom element in checkout.isml with the\n * id of \"checkout-main\".\n *\n * The checkout plugin will handle the different state the user interface is in as the user\n * progresses through the varying forms such as shipping and payment.\n *\n * Billing info and payment info are used a bit synonymously in this code.\n *\n */\n(function ($) {\n    $.fn.checkout = function () { // eslint-disable-line\n        var plugin = this;\n\n        //\n        // Collect form data from user input\n        //\n        var formData = {\n            // Shipping Address\n            shipping: {},\n\n            // Billing Address\n            billing: {},\n\n            // Payment\n            payment: {},\n\n            // Gift Codes\n            giftCode: {}\n        };\n\n        //\n        // The different states/stages of checkout\n        //\n        var checkoutStages = [\n            'shipping',\n            'payment',\n            'placeOrder',\n            'submitted'\n        ];\n\n        /**\n         * Updates the URL to determine stage\n         * @param {number} currentStage - The current stage the user is currently on in the checkout\n         */\n        function updateUrl(currentStage) {\n            history.pushState(\n                checkoutStages[currentStage],\n                document.title,\n                location.pathname\n                + '?stage='\n                + checkoutStages[currentStage]\n                + '#'\n                + checkoutStages[currentStage]\n            );\n        }\n\n        //\n        // Local member methods of the Checkout plugin\n        //\n        var members = {\n\n            // initialize the currentStage variable for the first time\n            currentStage: 0,\n\n            /**\n             * Set or update the checkout stage (AKA the shipping, billing, payment, etc... steps)\n             * @returns {Object} a promise\n             */\n            updateStage: function () {\n                var stage = checkoutStages[members.currentStage];\n                var defer = $.Deferred(); // eslint-disable-line\n\n                if (stage === 'shipping') {\n                    //\n                    // Clear Previous Errors\n                    //\n                    formHelpers.clearPreviousErrors('.shipping-form');\n\n                    //\n                    // Submit the Shipping Address Form\n                    //\n                    var isMultiShip = $('#checkout-main').hasClass('multi-ship');\n                    var formSelector = isMultiShip ?\n                        '.multi-shipping .active form' : '.single-shipping .shipping-form';\n                    var form = $(formSelector);\n\n                    if (isMultiShip && form.length === 0) {\n                        // disable the next:Payment button here\n                        $('body').trigger('checkout:disableButton', '.next-step-button button');\n                        // in case the multi ship form is already submitted\n                        var url = $('#checkout-main').attr('data-checkout-get-url');\n                        $.ajax({\n                            url: url,\n                            method: 'GET',\n                            success: function (data) {\n                                // enable the next:Payment button here\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                                if (!data.error) {\n                                    $('body').trigger('checkout:updateCheckoutView',\n                                        { order: data.order, customer: data.customer });\n                                    defer.resolve();\n                                } else if ($('.shipping-error .alert-danger').length < 1) {\n                                    var errorMsg = data.message;\n                                    var errorHtml = '<div class=\"alert alert-danger alert-dismissible valid-cart-error ' +\n                                        'fade show\" role=\"alert\">' +\n                                        '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">' +\n                                        '<span aria-hidden=\"true\">&times;</span>' +\n                                        '</button>' + errorMsg + '</div>';\n                                    $('.shipping-error').append(errorHtml);\n                                    scrollAnimate($('.shipping-error'));\n                                    defer.reject();\n                                }\n                            },\n                            error: function () {\n                                // enable the next:Payment button here\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                                // Server error submitting form\n                                defer.reject();\n                            }\n                        });\n                    } else {\n                        var shippingFormData = form.serialize();\n\n                        $('body').trigger('checkout:serializeShipping', {\n                            form: form,\n                            data: shippingFormData,\n                            callback: function (data) {\n                                shippingFormData = data;\n                            }\n                        });\n                        // disable the next:Payment button here\n                        $('body').trigger('checkout:disableButton', '.next-step-button button');\n                        $.ajax({\n                            url: form.attr('action'),\n                            type: 'post',\n                            data: shippingFormData,\n                            success: function (data) {\n                                 // enable the next:Payment button here\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                                shippingHelpers.methods.shippingFormResponse(defer, data);\n                            },\n                            error: function (err) {\n                                // enable the next:Payment button here\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                                if (err.responseJSON && err.responseJSON.redirectUrl) {\n                                    window.location.href = err.responseJSON.redirectUrl;\n                                }\n                                // Server error submitting form\n                                defer.reject(err.responseJSON);\n                            }\n                        });\n                    }\n                    return defer;\n                } else if (stage === 'payment') {\n                    //\n                    // Submit the Billing Address Form\n                    //\n\n                    formHelpers.clearPreviousErrors('.payment-form');\n\n                    var billingAddressForm = $('#dwfrm_billing .billing-address-block :input').serialize();\n\n                    $('body').trigger('checkout:serializeBilling', {\n                        form: $('#dwfrm_billing .billing-address-block'),\n                        data: billingAddressForm,\n                        callback: function (data) {\n                            if (data) {\n                                billingAddressForm = data;\n                            }\n                        }\n                    });\n\n                    var contactInfoForm = $('#dwfrm_billing .contact-info-block :input').serialize();\n\n                    $('body').trigger('checkout:serializeBilling', {\n                        form: $('#dwfrm_billing .contact-info-block'),\n                        data: contactInfoForm,\n                        callback: function (data) {\n                            if (data) {\n                                contactInfoForm = data;\n                            }\n                        }\n                    });\n\n                    var activeTabId = $('.tab-pane.active').attr('id');\n                    var paymentInfoSelector = '#dwfrm_billing .' + activeTabId + ' .payment-form-fields :input';\n                    var paymentInfoForm = $(paymentInfoSelector).serialize();\n\n                    $('body').trigger('checkout:serializeBilling', {\n                        form: $(paymentInfoSelector),\n                        data: paymentInfoForm,\n                        callback: function (data) {\n                            if (data) {\n                                paymentInfoForm = data;\n                            }\n                        }\n                    });\n\n                    var paymentForm = billingAddressForm + '&' + contactInfoForm + '&' + paymentInfoForm;\n\n                    if ($('.data-checkout-stage').data('customer-type') === 'registered') {\n                        // if payment method is credit card\n                        if ($('.payment-information').data('payment-method-id') === 'CREDIT_CARD') {\n                            if (!($('.payment-information').data('is-new-payment'))) {\n                                var cvvCode = $('.saved-payment-instrument.' +\n                                    'selected-payment .saved-payment-security-code').val();\n\n                                if (cvvCode === '') {\n                                    var cvvElement = $('.saved-payment-instrument.' +\n                                        'selected-payment ' +\n                                        '.form-control');\n                                    cvvElement.addClass('is-invalid');\n                                    scrollAnimate(cvvElement);\n                                    defer.reject();\n                                    return defer;\n                                }\n\n                                var $savedPaymentInstrument = $('.saved-payment-instrument' +\n                                    '.selected-payment'\n                                );\n\n                                paymentForm += '&storedPaymentUUID=' +\n                                    $savedPaymentInstrument.data('uuid');\n\n                                paymentForm += '&securityCode=' + cvvCode;\n                            }\n                        }\n                    }\n                     // disable the next:Place Order button here\n                    $('body').trigger('checkout:disableButton', '.next-step-button button');\n\n                    $.ajax({\n                        url: $('#dwfrm_billing').attr('action'),\n                        method: 'POST',\n                        data: paymentForm,\n                        success: function (data) {\n                             // enable the next:Place Order button here\n                            $('body').trigger('checkout:enableButton', '.next-step-button button');\n                            // look for field validation errors\n                            if (data.error) {\n                                if (data.fieldErrors.length) {\n                                    data.fieldErrors.forEach(function (error) {\n                                        if (Object.keys(error).length) {\n                                            formHelpers.loadFormErrors('.payment-form', error);\n                                        }\n                                    });\n                                }\n\n                                if (data.serverErrors.length) {\n                                    data.serverErrors.forEach(function (error) {\n                                        $('.error-message').show();\n                                        $('.error-message-text').text(error);\n                                        scrollAnimate($('.error-message'));\n                                    });\n                                }\n\n                                if (data.cartError) {\n                                    window.location.href = data.redirectUrl;\n                                }\n\n                                defer.reject();\n                            } else {\n                                //\n                                // Populate the Address Summary\n                                //\n                                $('body').trigger('checkout:updateCheckoutView',\n                                    { order: data.order, customer: data.customer });\n\n                                if (data.renderedPaymentInstruments) {\n                                    $('.stored-payments').empty().html(\n                                        data.renderedPaymentInstruments\n                                    );\n                                }\n\n                                if (data.customer.registeredUser\n                                    && data.customer.customerPaymentInstruments.length\n                                ) {\n                                    $('.cancel-new-payment').removeClass('checkout-hidden');\n                                }\n\n                                scrollAnimate();\n                                defer.resolve(data);\n                            }\n                        },\n                        error: function (err) {\n                            // enable the next:Place Order button here\n                            $('body').trigger('checkout:enableButton', '.next-step-button button');\n                            if (err.responseJSON && err.responseJSON.redirectUrl) {\n                                window.location.href = err.responseJSON.redirectUrl;\n                            }\n                        }\n                    });\n\n                    return defer;\n                } else if (stage === 'placeOrder') {\n                    // disable the placeOrder button here\n                    $('body').trigger('checkout:disableButton', '.next-step-button button');\n                    $.ajax({\n                        url: $('.place-order').data('action'),\n                        method: 'POST',\n                        success: function (data) {\n                            // enable the placeOrder button here\n                            $('body').trigger('checkout:enableButton', '.next-step-button button');\n                            if (data.error) {\n                                if (data.cartError) {\n                                    window.location.href = data.redirectUrl;\n                                    defer.reject();\n                                } else {\n                                    // go to appropriate stage and display error message\n                                    defer.reject(data);\n                                }\n                            } else {\n                                var continueUrl = data.continueUrl;\n                                var urlParams = {\n                                    ID: data.orderID,\n                                    token: data.orderToken\n                                };\n\n                                continueUrl += (continueUrl.indexOf('?') !== -1 ? '&' : '?') +\n                                    Object.keys(urlParams).map(function (key) {\n                                        return key + '=' + encodeURIComponent(urlParams[key]);\n                                    }).join('&');\n\n                                window.location.href = continueUrl;\n                                defer.resolve(data);\n                            }\n                        },\n                        error: function () {\n                            // enable the placeOrder button here\n                            $('body').trigger('checkout:enableButton', $('.next-step-button button'));\n                        }\n                    });\n\n                    return defer;\n                }\n                var p = $('<div>').promise(); // eslint-disable-line\n                setTimeout(function () {\n                    p.done(); // eslint-disable-line\n                }, 500);\n                return p; // eslint-disable-line\n            },\n\n            /**\n             * Initialize the checkout stage.\n             *\n             * TODO: update this to allow stage to be set from server?\n             */\n            initialize: function () {\n                // set the initial state of checkout\n                members.currentStage = checkoutStages\n                    .indexOf($('.data-checkout-stage').data('checkout-stage'));\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\n\n                //\n                // Handle Payment option selection\n                //\n                $('input[name$=\"paymentMethod\"]', plugin).on('change', function () {\n                    $('.credit-card-form').toggle($(this).val() === 'CREDIT_CARD');\n                });\n\n                //\n                // Handle Next State button click\n                //\n                $(plugin).on('click', '.next-step-button button', function () {\n                    members.nextStage();\n                });\n\n                //\n                // Handle Edit buttons on shipping and payment summary cards\n                //\n                $('.shipping-summary .edit-button', plugin).on('click', function () {\n                    if (!$('#checkout-main').hasClass('multi-ship')) {\n                        $('body').trigger('shipping:selectSingleShipping');\n                    }\n\n                    members.gotoStage('shipping');\n                });\n\n                $('.payment-summary .edit-button', plugin).on('click', function () {\n                    members.gotoStage('payment');\n                });\n\n                //\n                // remember stage (e.g. shipping)\n                //\n                updateUrl(members.currentStage);\n\n                //\n                // Listen for foward/back button press and move to correct checkout-stage\n                //\n                $(window).on('popstate', function (e) {\n                    //\n                    // Back button when event state less than current state in ordered\n                    // checkoutStages array.\n                    //\n                    if (e.state === null ||\n                        checkoutStages.indexOf(e.state) < members.currentStage) {\n                        members.handlePrevStage(false);\n                    } else if (checkoutStages.indexOf(e.state) > members.currentStage) {\n                        // Forward button  pressed\n                        members.handleNextStage(false);\n                    }\n                });\n\n                //\n                // Set the form data\n                //\n                plugin.data('formData', formData);\n            },\n\n            /**\n             * The next checkout state step updates the css for showing correct buttons etc...\n             */\n            nextStage: function () {\n                var promise = members.updateStage();\n\n                promise.done(function () {\n                    // Update UI with new stage\n                    members.handleNextStage(true);\n                });\n\n                promise.fail(function (data) {\n                    // show errors\n                    if (data) {\n                        if (data.errorStage) {\n                            members.gotoStage(data.errorStage.stage);\n\n                            if (data.errorStage.step === 'billingAddress') {\n                                var $billingAddressSameAsShipping = $(\n                                    'input[name$=\"_shippingAddressUseAsBillingAddress\"]'\n                                );\n                                if ($billingAddressSameAsShipping.is(':checked')) {\n                                    $billingAddressSameAsShipping.prop('checked', false);\n                                }\n                            }\n                        }\n\n                        if (data.errorMessage) {\n                            $('.error-message').show();\n                            $('.error-message-text').text(data.errorMessage);\n                        }\n                    }\n                });\n            },\n\n            /**\n             * The next checkout state step updates the css for showing correct buttons etc...\n             *\n             * @param {boolean} bPushState - boolean when true pushes state using the history api.\n             */\n            handleNextStage: function (bPushState) {\n                if (members.currentStage < checkoutStages.length - 1) {\n                    // move stage forward\n                    members.currentStage++;\n\n                    //\n                    // show new stage in url (e.g.payment)\n                    //\n                    if (bPushState) {\n                        updateUrl(members.currentStage);\n                    }\n                }\n\n                // Set the next stage on the DOM\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\n            },\n\n            /**\n             * Previous State\n             */\n            handlePrevStage: function () {\n                if (members.currentStage > 0) {\n                    // move state back\n                    members.currentStage--;\n                    updateUrl(members.currentStage);\n                }\n\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\n            },\n\n            /**\n             * Use window history to go to a checkout stage\n             * @param {string} stageName - the checkout state to goto\n             */\n            gotoStage: function (stageName) {\n                members.currentStage = checkoutStages.indexOf(stageName);\n                updateUrl(members.currentStage);\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\n            }\n        };\n\n        //\n        // Initialize the checkout\n        //\n        members.initialize();\n\n        return this;\n    };\n}(jQuery));\n\n\nvar exports = {\n    initialize: function () {\n        $('#checkout-main').checkout();\n    },\n\n    updateCheckoutView: function () {\n        $('body').on('checkout:updateCheckoutView', function (e, data) {\n            shippingHelpers.methods.updateMultiShipInformation(data.order);\n            summaryHelpers.updateTotals(data.order.totals);\n            data.order.shipping.forEach(function (shipping) {\n                shippingHelpers.methods.updateShippingInformation(\n                    shipping,\n                    data.order,\n                    data.customer,\n                    data.options\n                );\n            });\n            billingHelpers.methods.updateBillingInformation(\n                data.order,\n                data.customer,\n                data.options\n            );\n            billingHelpers.methods.updatePaymentInformation(data.order, data.options);\n            summaryHelpers.updateOrderProductSummaryInformation(data.order, data.options);\n        });\n    },\n\n    disableButton: function () {\n        $('body').on('checkout:disableButton', function (e, button) {\n            $(button).prop('disabled', true);\n        });\n    },\n\n    enableButton: function () {\n        $('body').on('checkout:enableButton', function (e, button) {\n            $(button).prop('disabled', false);\n        });\n    }\n\n\n};\n\n[billingHelpers, shippingHelpers, addressHelpers].forEach(function (library) {\n    Object.keys(library).forEach(function (item) {\n        if (typeof library[item] === 'object') {\n            exports[item] = $.extend({}, exports[item], library[item]);\n        } else {\n            exports[item] = library[item];\n        }\n    });\n});\n\nmodule.exports = exports;\n\n\n//# sourceURL=webpack:///../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/checkout.js?");

/***/ }),

/***/ "../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js":
/*!******************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js\");\n\n/**\n * Display error messages and highlight form fields with errors.\n * @param {string} parentSelector - the form which contains the fields\n * @param {Object} fieldErrors - the fields with errors\n */\nfunction loadFormErrors(parentSelector, fieldErrors) { // eslint-disable-line\n    // Display error messages and highlight form fields with errors.\n    $.each(fieldErrors, function (attr) {\n        $('*[name=' + attr + ']', parentSelector)\n            .addClass('is-invalid')\n            .siblings('.invalid-feedback')\n            .html(fieldErrors[attr]);\n    });\n    // Animate to top of form that has errors\n    scrollAnimate($(parentSelector));\n}\n\n/**\n * Clear the form errors.\n * @param {string} parentSelector - the parent form selector.\n */\nfunction clearPreviousErrors(parentSelector) {\n    $(parentSelector).find('.form-control.is-invalid').removeClass('is-invalid');\n    $('.error-message').hide();\n}\n\nmodule.exports = {\n    loadFormErrors: loadFormErrors,\n    clearPreviousErrors: clearPreviousErrors\n};\n\n\n//# sourceURL=webpack:///../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js?");

/***/ }),

/***/ "../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/shipping.js":
/*!****************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/shipping.js ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar addressHelpers = __webpack_require__(/*! ./address */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js\");\nvar formHelpers = __webpack_require__(/*! ./formErrors */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js\");\nvar scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js\");\n\n/**\n * updates the shipping address selector within shipping forms\n * @param {Object} productLineItem - the productLineItem model\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order model\n * @param {Object} customer - the customer model\n */\nfunction updateShippingAddressSelector(productLineItem, shipping, order, customer) {\n    var uuidEl = $('input[value=' + productLineItem.UUID + ']');\n    var shippings = order.shipping;\n\n    var form;\n    var $shippingAddressSelector;\n    var hasSelectedAddress = false;\n\n    if (uuidEl && uuidEl.length > 0) {\n        form = uuidEl[0].form;\n        $shippingAddressSelector = $('.addressSelector', form);\n    }\n\n    if ($shippingAddressSelector && $shippingAddressSelector.length === 1) {\n        $shippingAddressSelector.empty();\n        // Add New Address option\n        $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n            null,\n            false,\n            order\n        ));\n\n        if (customer.addresses && customer.addresses.length > 0) {\n            $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n                order.resources.accountAddresses,\n                false,\n                order\n            ));\n\n            customer.addresses.forEach(function (address) {\n                var isSelected = shipping.matchingAddressId === address.ID;\n                $shippingAddressSelector.append(\n                    addressHelpers.methods.optionValueForAddress(\n                        { UUID: 'ab_' + address.ID, shippingAddress: address },\n                        isSelected,\n                        order\n                    )\n                );\n            });\n        }\n        // Separator -\n        $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n            order.resources.shippingAddresses, false, order, { className: 'multi-shipping' }\n        ));\n        shippings.forEach(function (aShipping) {\n            var isSelected = shipping.UUID === aShipping.UUID;\n            hasSelectedAddress = hasSelectedAddress || isSelected;\n            var addressOption = addressHelpers.methods.optionValueForAddress(\n                aShipping,\n                isSelected,\n                order,\n                { className: 'multi-shipping' }\n            );\n\n            var newAddress = addressOption.html() === order.resources.addNewAddress;\n            var matchingUUID = aShipping.UUID === shipping.UUID;\n            if ((newAddress && matchingUUID) || (!newAddress && matchingUUID) || (!newAddress && !matchingUUID)) {\n                $shippingAddressSelector.append(addressOption);\n            }\n            if (newAddress && !matchingUUID) {\n                $(addressOption[0]).remove();\n            }\n        });\n    }\n\n    if (!hasSelectedAddress) {\n        // show\n        $(form).addClass('hide-details');\n    } else {\n        $(form).removeClass('hide-details');\n    }\n\n    $('body').trigger('shipping:updateShippingAddressSelector', {\n        productLineItem: productLineItem,\n        shipping: shipping,\n        order: order,\n        customer: customer\n    });\n}\n\n/**\n * updates the shipping address form values within shipping forms\n * @param {Object} shipping - the shipping (shipment model) model\n */\nfunction updateShippingAddressFormValues(shipping) {\n    var addressObject = $.extend({}, shipping.shippingAddress);\n\n    if (!addressObject) {\n        addressObject = {\n            firstName: null,\n            lastName: null,\n            address1: null,\n            address2: null,\n            city: null,\n            postalCode: null,\n            stateCode: null,\n            countryCode: null,\n            phone: null\n        };\n    }\n\n    addressObject.isGift = shipping.isGift;\n    addressObject.giftMessage = shipping.giftMessage;\n\n    $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\n        var form = el.form;\n        if (!form) return;\n        var countryCode = addressObject.countryCode;\n\n        $('input[name$=_firstName]', form).val(addressObject.firstName);\n        $('input[name$=_lastName]', form).val(addressObject.lastName);\n        $('input[name$=_address1]', form).val(addressObject.address1);\n        $('input[name$=_address2]', form).val(addressObject.address2);\n        $('input[name$=_city]', form).val(addressObject.city);\n        $('input[name$=_postalCode]', form).val(addressObject.postalCode);\n        $('select[name$=_stateCode],input[name$=_stateCode]', form)\n            .val(addressObject.stateCode);\n\n        if (countryCode && typeof countryCode === 'object') {\n            $('select[name$=_country]', form).val(addressObject.countryCode.value);\n        } else {\n            $('select[name$=_country]', form).val(addressObject.countryCode);\n        }\n\n        $('input[name$=_phone]', form).val(addressObject.phone);\n\n        $('input[name$=_isGift]', form).prop('checked', addressObject.isGift);\n        $('textarea[name$=_giftMessage]', form).val(addressObject.isGift && addressObject.giftMessage ? addressObject.giftMessage : '');\n    });\n\n    $('body').trigger('shipping:updateShippingAddressFormValues', { shipping: shipping });\n}\n\n/**\n * updates the shipping method radio buttons within shipping forms\n * @param {Object} shipping - the shipping (shipment model) model\n */\nfunction updateShippingMethods(shipping) {\n    var uuidEl = $('input[value=' + shipping.UUID + ']');\n    if (uuidEl && uuidEl.length > 0) {\n        $.each(uuidEl, function (shipmentIndex, el) {\n            var form = el.form;\n            if (!form) return;\n\n            var $shippingMethodList = $('.shipping-method-list', form);\n\n            if ($shippingMethodList && $shippingMethodList.length > 0) {\n                $shippingMethodList.empty();\n                var shippingMethods = shipping.applicableShippingMethods;\n                var selected = shipping.selectedShippingMethod || {};\n                var shippingMethodFormID = form.name + '_shippingAddress_shippingMethodID';\n                //\n                // Create the new rows for each shipping method\n                //\n                $.each(shippingMethods, function (methodIndex, shippingMethod) {\n                    var tmpl = $('#shipping-method-template').clone();\n                    // set input\n                    $('input', tmpl)\n                        .prop('id', 'shippingMethod-' + shippingMethod.ID + '-' + shipping.UUID)\n                        .prop('name', shippingMethodFormID)\n                        .prop('value', shippingMethod.ID)\n                        .attr('checked', shippingMethod.ID === selected.ID);\n\n                    $('label', tmpl)\n                        .prop('for', 'shippingMethod-' + shippingMethod.ID + '-' + shipping.UUID);\n                    // set shipping method name\n                    $('.display-name', tmpl).text(shippingMethod.displayName);\n                    // set or hide arrival time\n                    if (shippingMethod.estimatedArrivalTime) {\n                        $('.arrival-time', tmpl)\n                            .text('(' + shippingMethod.estimatedArrivalTime + ')')\n                            .show();\n                    }\n                    // set shipping cost\n                    $('.shipping-cost', tmpl).text(shippingMethod.shippingCost);\n                    $shippingMethodList.append(tmpl.html());\n                });\n            }\n        });\n    }\n\n    $('body').trigger('shipping:updateShippingMethods', { shipping: shipping });\n}\n\n/**\n * Update list of available shipping methods whenever user modifies shipping address details.\n * @param {jQuery} $shippingForm - current shipping form\n */\nfunction updateShippingMethodList($shippingForm) {\n    // delay for autocomplete!\n    setTimeout(function () {\n        var $shippingMethodList = $shippingForm.find('.shipping-method-list');\n        var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);\n        var shipmentUUID = $shippingForm.find('[name=shipmentUUID]').val();\n        var url = $shippingMethodList.data('actionUrl');\n        urlParams.shipmentUUID = shipmentUUID;\n\n        $shippingMethodList.spinner().start();\n        $.ajax({\n            url: url,\n            type: 'post',\n            dataType: 'json',\n            data: urlParams,\n            success: function (data) {\n                if (data.error) {\n                    window.location.href = data.redirectUrl;\n                } else {\n                    $('body').trigger('checkout:updateCheckoutView',\n                        {\n                            order: data.order,\n                            customer: data.customer,\n                            options: { keepOpen: true }\n                        });\n\n                    $shippingMethodList.spinner().stop();\n                }\n            }\n        });\n    }, 300);\n}\n\n/**\n * updates the order shipping summary for an order shipment model\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order model\n */\nfunction updateShippingSummaryInformation(shipping, order) {\n    $('[data-shipment-summary=' + shipping.UUID + ']').each(function (i, el) {\n        var $container = $(el);\n        var $shippingAddressLabel = $container.find('.shipping-addr-label');\n        var $addressContainer = $container.find('.address-summary');\n        var $shippingPhone = $container.find('.shipping-phone');\n        var $methodTitle = $container.find('.shipping-method-title');\n        var $methodArrivalTime = $container.find('.shipping-method-arrival-time');\n        var $methodPrice = $container.find('.shipping-method-price');\n        var $shippingSummaryLabel = $container.find('.shipping-method-label');\n        var $summaryDetails = $container.find('.row.summary-details');\n        var giftMessageSummary = $container.find('.gift-summary');\n\n        var address = shipping.shippingAddress;\n        var selectedShippingMethod = shipping.selectedShippingMethod;\n        var isGift = shipping.isGift;\n\n        addressHelpers.methods.populateAddressSummary($addressContainer, address);\n\n        if (address && address.phone) {\n            $shippingPhone.text(address.phone);\n        } else {\n            $shippingPhone.empty();\n        }\n\n        if (selectedShippingMethod) {\n            $('body').trigger('shipping:updateAddressLabelText',\n                { selectedShippingMethod: selectedShippingMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel });\n            $shippingSummaryLabel.show();\n            $summaryDetails.show();\n            $methodTitle.text(selectedShippingMethod.displayName);\n            if (selectedShippingMethod.estimatedArrivalTime) {\n                $methodArrivalTime.text(\n                    '( ' + selectedShippingMethod.estimatedArrivalTime + ' )'\n                );\n            } else {\n                $methodArrivalTime.empty();\n            }\n            $methodPrice.text(selectedShippingMethod.shippingCost);\n        }\n\n        if (isGift) {\n            giftMessageSummary.find('.gift-message-summary').text(shipping.giftMessage);\n            giftMessageSummary.removeClass('d-none');\n        } else {\n            giftMessageSummary.addClass('d-none');\n        }\n    });\n\n    $('body').trigger('shipping:updateShippingSummaryInformation', { shipping: shipping, order: order });\n}\n\n/**\n * Update the read-only portion of the shipment display (per PLI)\n * @param {Object} productLineItem - the productLineItem model\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order model\n * @param {Object} [options] - options for updating PLI summary info\n * @param {Object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'\n */\nfunction updatePLIShippingSummaryInformation(productLineItem, shipping, order, options) {\n    var $pli = $('input[value=' + productLineItem.UUID + ']');\n    var form = $pli && $pli.length > 0 ? $pli[0].form : null;\n\n    if (!form) return;\n\n    var $viewBlock = $('.view-address-block', form);\n\n    var address = shipping.shippingAddress || {};\n    var selectedMethod = shipping.selectedShippingMethod;\n\n    var nameLine = address.firstName ? address.firstName + ' ' : '';\n    if (address.lastName) nameLine += address.lastName;\n\n    var address1Line = address.address1;\n    var address2Line = address.address2;\n\n    var phoneLine = address.phone;\n\n    var shippingCost = selectedMethod ? selectedMethod.shippingCost : '';\n    var methodNameLine = selectedMethod ? selectedMethod.displayName : '';\n    var methodArrivalTime = selectedMethod && selectedMethod.estimatedArrivalTime\n        ? '(' + selectedMethod.estimatedArrivalTime + ')'\n        : '';\n\n    var tmpl = $('#pli-shipping-summary-template').clone();\n\n    $('.ship-to-name', tmpl).text(nameLine);\n    $('.ship-to-address1', tmpl).text(address1Line);\n    $('.ship-to-address2', tmpl).text(address2Line);\n    $('.ship-to-city', tmpl).text(address.city);\n    if (address.stateCode) {\n        $('.ship-to-st', tmpl).text(address.stateCode);\n    }\n    $('.ship-to-zip', tmpl).text(address.postalCode);\n    $('.ship-to-phone', tmpl).text(phoneLine);\n\n    if (!address2Line) {\n        $('.ship-to-address2', tmpl).hide();\n    }\n\n    if (!phoneLine) {\n        $('.ship-to-phone', tmpl).hide();\n    }\n\n    if (shipping.selectedShippingMethod) {\n        $('.display-name', tmpl).text(methodNameLine);\n        $('.arrival-time', tmpl).text(methodArrivalTime);\n        $('.price', tmpl).text(shippingCost);\n    }\n\n    if (shipping.isGift) {\n        $('.gift-message-summary', tmpl).text(shipping.giftMessage);\n        var shipment = $('.gift-message-' + shipping.UUID);\n        $(shipment).val(shipping.giftMessage);\n    } else {\n        $('.gift-summary', tmpl).addClass('d-none');\n    }\n    // checking h5 title shipping to or pickup\n    var $shippingAddressLabel = $('.shipping-header-text', tmpl);\n    $('body').trigger('shipping:updateAddressLabelText',\n        { selectedShippingMethod: selectedMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel });\n\n    $viewBlock.html(tmpl.html());\n\n    $('body').trigger('shipping:updatePLIShippingSummaryInformation', {\n        productLineItem: productLineItem,\n        shipping: shipping,\n        order: order,\n        options: options\n    });\n}\n\n/**\n * Update the hidden form values that associate shipping info with product line items\n * @param {Object} productLineItem - the productLineItem model\n * @param {Object} shipping - the shipping (shipment model) model\n */\nfunction updateProductLineItemShipmentUUIDs(productLineItem, shipping) {\n    $('input[value=' + productLineItem.UUID + ']').each(function (key, pli) {\n        var form = pli.form;\n        $('[name=shipmentUUID]', form).val(shipping.UUID);\n        $('[name=originalShipmentUUID]', form).val(shipping.UUID);\n\n        $(form).closest('.card').attr('data-shipment-uuid', shipping.UUID);\n    });\n\n    $('body').trigger('shipping:updateProductLineItemShipmentUUIDs', {\n        productLineItem: productLineItem,\n        shipping: shipping\n    });\n}\n\n/**\n * Update the shipping UI for a single shipping info (shipment model)\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order/basket model\n * @param {Object} customer - the customer model\n * @param {Object} [options] - options for updating PLI summary info\n * @param {Object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'\n */\nfunction updateShippingInformation(shipping, order, customer, options) {\n    // First copy over shipmentUUIDs from response, to each PLI form\n    order.shipping.forEach(function (aShipping) {\n        aShipping.productLineItems.items.forEach(function (productLineItem) {\n            updateProductLineItemShipmentUUIDs(productLineItem, aShipping);\n        });\n    });\n\n    // Now update shipping information, based on those associations\n    updateShippingMethods(shipping);\n    updateShippingAddressFormValues(shipping);\n    updateShippingSummaryInformation(shipping, order);\n\n    // And update the PLI-based summary information as well\n    shipping.productLineItems.items.forEach(function (productLineItem) {\n        updateShippingAddressSelector(productLineItem, shipping, order, customer);\n        updatePLIShippingSummaryInformation(productLineItem, shipping, order, options);\n    });\n\n    $('body').trigger('shipping:updateShippingInformation', {\n        order: order,\n        shipping: shipping,\n        customer: customer,\n        options: options\n    });\n}\n\n/**\n * Update the checkout state (single vs. multi-ship)\n * @param {Object} order - checkout model to use as basis of new truth\n */\nfunction updateMultiShipInformation(order) {\n    var $checkoutMain = $('#checkout-main');\n    var $checkbox = $('[name=usingMultiShipping]');\n    var $submitShippingBtn = $('button.submit-shipping');\n    $('.shipping-error .alert-danger').remove();\n\n    if (order.usingMultiShipping) {\n        $checkoutMain.addClass('multi-ship');\n        $checkbox.prop('checked', true);\n    } else {\n        $checkoutMain.removeClass('multi-ship');\n        $checkbox.prop('checked', null);\n        $submitShippingBtn.prop('disabled', null);\n    }\n\n    $('body').trigger('shipping:updateMultiShipInformation', { order: order });\n}\n\n/**\n  * Create an alert to display the error message\n  * @param {Object} message - Error message to display\n  */\nfunction createErrorNotification(message) {\n    var errorHtml = '<div class=\"alert alert-danger alert-dismissible valid-cart-error ' +\n    'fade show\" role=\"alert\">' +\n    '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">' +\n    '<span aria-hidden=\"true\">&times;</span>' +\n    '</button>' + message + '</div>';\n\n    $('.shipping-error').append(errorHtml);\n    scrollAnimate($('.shipping-error'));\n}\n\n/**\n * Handle response from the server for valid or invalid form fields.\n * @param {Object} defer - the deferred object which will resolve on success or reject.\n * @param {Object} data - the response data with the invalid form fields or\n *  valid model data.\n */\nfunction shippingFormResponse(defer, data) {\n    var isMultiShip = $('#checkout-main').hasClass('multi-ship');\n    var formSelector = isMultiShip\n        ? '.multi-shipping .active form'\n        : '.single-shipping form';\n\n    // highlight fields with errors\n    if (data.error) {\n        if (data.fieldErrors.length) {\n            data.fieldErrors.forEach(function (error) {\n                if (Object.keys(error).length) {\n                    formHelpers.loadFormErrors(formSelector, error);\n                }\n            });\n            defer.reject(data);\n        }\n\n        if (data.serverErrors && data.serverErrors.length) {\n            $.each(data.serverErrors, function (index, element) {\n                createErrorNotification(element);\n            });\n\n            defer.reject(data);\n        }\n\n        if (data.cartError) {\n            window.location.href = data.redirectUrl;\n            defer.reject();\n        }\n    } else {\n        // Populate the Address Summary\n\n        $('body').trigger('checkout:updateCheckoutView', {\n            order: data.order,\n            customer: data.customer\n        });\n        scrollAnimate($('.payment-form'));\n        defer.resolve(data);\n    }\n}\n/**\n * Clear out all the shipping form values and select the new address in the drop down\n * @param {Object} order - the order object\n */\nfunction clearShippingForms(order) {\n    order.shipping.forEach(function (shipping) {\n        $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\n            var form = el.form;\n            if (!form) return;\n\n            $('input[name$=_firstName]', form).val('');\n            $('input[name$=_lastName]', form).val('');\n            $('input[name$=_address1]', form).val('');\n            $('input[name$=_address2]', form).val('');\n            $('input[name$=_city]', form).val('');\n            $('input[name$=_postalCode]', form).val('');\n            $('select[name$=_stateCode],input[name$=_stateCode]', form).val('');\n            $('select[name$=_country]', form).val('');\n\n            $('input[name$=_phone]', form).val('');\n\n            $('input[name$=_isGift]', form).prop('checked', false);\n            $('textarea[name$=_giftMessage]', form).val('');\n            $(form).find('.gift-message').addClass('d-none');\n\n            $(form).attr('data-address-mode', 'new');\n            var addressSelectorDropDown = $('.addressSelector option[value=new]', form);\n            $(addressSelectorDropDown).prop('selected', true);\n        });\n    });\n\n    $('body').trigger('shipping:clearShippingForms', { order: order });\n}\n\n/**\n * Does Ajax call to create a server-side shipment w/ pliUUID & URL\n * @param {string} url - string representation of endpoint URL\n * @param {Object} shipmentData - product line item UUID\n * @returns {Object} - promise value for async call\n */\nfunction createNewShipment(url, shipmentData) {\n    $.spinner().start();\n    return $.ajax({\n        url: url,\n        type: 'post',\n        dataType: 'json',\n        data: shipmentData\n    });\n}\n\n/**\n * Does Ajax call to select shipping method\n * @param {string} url - string representation of endpoint URL\n * @param {Object} urlParams - url params\n * @param {Object} el - element that triggered this call\n */\nfunction selectShippingMethodAjax(url, urlParams, el) {\n    $.spinner().start();\n    $.ajax({\n        url: url,\n        type: 'post',\n        dataType: 'json',\n        data: urlParams\n    })\n        .done(function (data) {\n            if (data.error) {\n                window.location.href = data.redirectUrl;\n            } else {\n                $('body').trigger('checkout:updateCheckoutView',\n                    {\n                        order: data.order,\n                        customer: data.customer,\n                        options: { keepOpen: true },\n                        urlParams: urlParams\n                    }\n                );\n                $('body').trigger('checkout:postUpdateCheckoutView',\n                    {\n                        el: el\n                    }\n                );\n            }\n            $.spinner().stop();\n        })\n        .fail(function () {\n            $.spinner().stop();\n        });\n}\n\n/**\n * Hide and show to appropriate elements to show the multi ship shipment cards in the enter view\n * @param {jQuery} element - The shipping content\n */\nfunction enterMultishipView(element) {\n    element.find('.btn-enter-multi-ship').removeClass('d-none');\n\n    element.find('.view-address-block').addClass('d-none');\n    element.find('.shipping-address').addClass('d-none');\n    element.find('.btn-save-multi-ship.save-shipment').addClass('d-none');\n    element.find('.btn-edit-multi-ship').addClass('d-none');\n    element.find('.multi-ship-address-actions').addClass('d-none');\n}\n\n/**\n * Hide and show to appropriate elements to show the multi ship shipment cards in the view mode\n * @param {jQuery} element - The shipping content\n */\nfunction viewMultishipAddress(element) {\n    element.find('.view-address-block').removeClass('d-none');\n    element.find('.btn-edit-multi-ship').removeClass('d-none');\n\n    element.find('.shipping-address').addClass('d-none');\n    element.find('.btn-save-multi-ship.save-shipment').addClass('d-none');\n    element.find('.btn-enter-multi-ship').addClass('d-none');\n    element.find('.multi-ship-address-actions').addClass('d-none');\n}\n\n/**\n * Hide and show to appropriate elements that allows the user to edit multi ship address information\n * @param {jQuery} element - The shipping content\n */\nfunction editMultiShipAddress(element) {\n    // Show\n    element.find('.shipping-address').removeClass('d-none');\n    element.find('.btn-save-multi-ship.save-shipment').removeClass('d-none');\n\n    // Hide\n    element.find('.view-address-block').addClass('d-none');\n    element.find('.btn-enter-multi-ship').addClass('d-none');\n    element.find('.btn-edit-multi-ship').addClass('d-none');\n    element.find('.multi-ship-address-actions').addClass('d-none');\n\n    $('body').trigger('shipping:editMultiShipAddress', { element: element, form: element.find('.shipping-form') });\n}\n\n/**\n * perform the proper actions once a user has clicked enter address or edit address for a shipment\n * @param {jQuery} element - The shipping content\n * @param {string} mode - the address mode\n */\nfunction editOrEnterMultiShipInfo(element, mode) {\n    var form = $(element).closest('form');\n    var root = $(element).closest('.shipping-content');\n\n    $('body').trigger('shipping:updateDataAddressMode', { form: form, mode: mode });\n\n    editMultiShipAddress(root);\n\n    var addressInfo = addressHelpers.methods.getAddressFieldsFromUI(form);\n\n    var savedState = {\n        UUID: $('input[name=shipmentUUID]', form).val(),\n        shippingAddress: addressInfo\n    };\n\n    root.data('saved-state', JSON.stringify(savedState));\n}\n\nmodule.exports = {\n    methods: {\n        updateShippingAddressSelector: updateShippingAddressSelector,\n        updateShippingAddressFormValues: updateShippingAddressFormValues,\n        updateShippingMethods: updateShippingMethods,\n        updateShippingSummaryInformation: updateShippingSummaryInformation,\n        updatePLIShippingSummaryInformation: updatePLIShippingSummaryInformation,\n        updateProductLineItemShipmentUUIDs: updateProductLineItemShipmentUUIDs,\n        updateShippingInformation: updateShippingInformation,\n        updateMultiShipInformation: updateMultiShipInformation,\n        shippingFormResponse: shippingFormResponse,\n        createNewShipment: createNewShipment,\n        selectShippingMethodAjax: selectShippingMethodAjax,\n        updateShippingMethodList: updateShippingMethodList,\n        clearShippingForms: clearShippingForms,\n        editMultiShipAddress: editMultiShipAddress,\n        editOrEnterMultiShipInfo: editOrEnterMultiShipInfo,\n        createErrorNotification: createErrorNotification,\n        viewMultishipAddress: viewMultishipAddress\n    },\n\n    selectShippingMethod: function () {\n        var baseObj = this;\n\n        $('.shipping-method-list').change(function () {\n            var $shippingForm = $(this).parents('form');\n            var methodID = $(':checked', this).val();\n            var shipmentUUID = $shippingForm.find('[name=shipmentUUID]').val();\n            var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);\n            urlParams.shipmentUUID = shipmentUUID;\n            urlParams.methodID = methodID;\n            urlParams.isGift = $shippingForm.find('.gift').prop('checked');\n            urlParams.giftMessage = $shippingForm.find('textarea[name$=_giftMessage]').val();\n\n            var url = $(this).data('select-shipping-method-url');\n\n            if (baseObj.methods && baseObj.methods.selectShippingMethodAjax) {\n                baseObj.methods.selectShippingMethodAjax(url, urlParams, $(this));\n            } else {\n                selectShippingMethodAjax(url, urlParams, $(this));\n            }\n        });\n    },\n\n    toggleMultiship: function () {\n        var baseObj = this;\n\n        $('input[name=\"usingMultiShipping\"]').on('change', function () {\n            var url = $('.multi-shipping-checkbox-block form').attr('action');\n            var usingMultiShip = this.checked;\n\n            $.ajax({\n                url: url,\n                type: 'post',\n                dataType: 'json',\n                data: { usingMultiShip: usingMultiShip },\n                success: function (response) {\n                    if (response.error) {\n                        window.location.href = response.redirectUrl;\n                    } else {\n                        $('body').trigger('checkout:updateCheckoutView', {\n                            order: response.order,\n                            customer: response.customer\n                        });\n\n                        if ($('#checkout-main').data('customer-type') === 'guest') {\n                            if (baseObj.methods && baseObj.methods.clearShippingForms) {\n                                baseObj.methods.clearShippingForms(response.order);\n                            } else {\n                                clearShippingForms(response.order);\n                            }\n                        } else {\n                            response.order.shipping.forEach(function (shipping) {\n                                $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\n                                    var form = el.form;\n                                    if (!form) return;\n\n                                    $(form).attr('data-address-mode', 'edit');\n                                    var addressSelectorDropDown = $(form).find('.addressSelector option[value=\"ab_' + shipping.matchingAddressId + '\"]');\n                                    $(addressSelectorDropDown).prop('selected', true);\n                                    $('input[name$=_isGift]', form).prop('checked', false);\n                                    $('textarea[name$=_giftMessage]', form).val('');\n                                    $(form).find('.gift-message').addClass('d-none');\n                                });\n                            });\n                        }\n\n                        if (usingMultiShip) {\n                            $('body').trigger('shipping:selectMultiShipping', { data: response });\n                        } else {\n                            $('body').trigger('shipping:selectSingleShipping', { data: response });\n                        }\n                    }\n\n                    $.spinner().stop();\n                },\n                error: function () {\n                    $.spinner().stop();\n                }\n            });\n        });\n    },\n\n    selectSingleShipping: function () {\n        $('body').on('shipping:selectSingleShipping', function () {\n            $('.single-shipping .shipping-address').removeClass('d-none');\n        });\n    },\n\n    selectMultiShipping: function () {\n        var baseObj = this;\n\n        $('body').on('shipping:selectMultiShipping', function (e, data) {\n            $('.multi-shipping .shipping-address').addClass('d-none');\n\n            data.data.order.shipping.forEach(function (shipping) {\n                var element = $('.multi-shipping .card[data-shipment-uuid=\"' + shipping.UUID + '\"]');\n\n                if (shipping.shippingAddress) {\n                    if (baseObj.methods && baseObj.methods.viewMultishipAddress) {\n                        baseObj.methods.viewMultishipAddress($(element));\n                    } else {\n                        viewMultishipAddress($(element));\n                    }\n                } else {\n                    /* eslint-disable no-lonely-if */\n                    if (baseObj.methods && baseObj.methods.enterMultishipView) {\n                        baseObj.methods.enterMultishipView($(element));\n                    } else {\n                        enterMultishipView($(element));\n                    }\n                    /* eslint-enable no-lonely-if */\n                }\n            });\n        });\n    },\n\n    selectSingleShipAddress: function () {\n        $('.single-shipping .addressSelector').on('change', function () {\n            var form = $(this).parents('form')[0];\n            var selectedOption = $('option:selected', this);\n            var attrs = selectedOption.data();\n            var shipmentUUID = selectedOption[0].value;\n            var originalUUID = $('input[name=shipmentUUID]', form).val();\n            var element;\n\n            Object.keys(attrs).forEach(function (attr) {\n                element = attr === 'countryCode' ? 'country' : attr;\n                $('[name$=' + element + ']', form).val(attrs[attr]);\n            });\n\n            $('[name$=stateCode]', form).trigger('change');\n\n            if (shipmentUUID === 'new') {\n                $(form).attr('data-address-mode', 'new');\n            } else if (shipmentUUID === originalUUID) {\n                $(form).attr('data-address-mode', 'shipment');\n            } else if (shipmentUUID.indexOf('ab_') === 0) {\n                $(form).attr('data-address-mode', 'customer');\n            } else {\n                $(form).attr('data-address-mode', 'edit');\n            }\n        });\n    },\n\n    selectMultiShipAddress: function () {\n        var baseObj = this;\n\n        $('.multi-shipping .addressSelector').on('change', function () {\n            var form = $(this).closest('form');\n            var selectedOption = $('option:selected', this);\n            var attrs = selectedOption.data();\n            var shipmentUUID = selectedOption[0].value;\n            var originalUUID = $('input[name=shipmentUUID]', form).val();\n            var pliUUID = $('input[name=productLineItemUUID]', form).val();\n            var createNewShipmentScoped = baseObj.methods && baseObj.methods.createNewShipment ? baseObj.methods.createNewShipment : createNewShipment;\n\n            var element;\n            Object.keys(attrs).forEach(function (attr) {\n                if (attr === 'isGift') {\n                    $('[name$=' + attr + ']', form).prop('checked', attrs[attr]);\n                    $('[name$=' + attr + ']', form).trigger('change');\n                } else {\n                    element = attr === 'countryCode' ? 'country' : attr;\n                    $('[name$=' + element + ']', form).val(attrs[attr]);\n                }\n            });\n\n            if (shipmentUUID === 'new' && pliUUID) {\n                var createShipmentUrl = $(this).attr('data-create-shipment-url');\n                createNewShipmentScoped(createShipmentUrl, { productLineItemUUID: pliUUID })\n                    .done(function (response) {\n                        $.spinner().stop();\n                        if (response.error) {\n                            if (response.redirectUrl) {\n                                window.location.href = response.redirectUrl;\n                            }\n                            return;\n                        }\n\n                        $('body').trigger('checkout:updateCheckoutView',\n                            {\n                                order: response.order,\n                                customer: response.customer,\n                                options: { keepOpen: true }\n                            }\n                        );\n\n                        $(form).attr('data-address-mode', 'new');\n                    })\n                    .fail(function () {\n                        $.spinner().stop();\n                    });\n            } else if (shipmentUUID === originalUUID) {\n                $('select[name$=stateCode]', form).trigger('change');\n                $(form).attr('data-address-mode', 'shipment');\n            } else if (shipmentUUID.indexOf('ab_') === 0) {\n                var url = $(form).attr('action');\n                var serializedData = $(form).serialize();\n                createNewShipmentScoped(url, serializedData)\n                    .done(function (response) {\n                        $.spinner().stop();\n                        if (response.error) {\n                            if (response.redirectUrl) {\n                                window.location.href = response.redirectUrl;\n                            }\n                            return;\n                        }\n\n                        $('body').trigger('checkout:updateCheckoutView',\n                            {\n                                order: response.order,\n                                customer: response.customer,\n                                options: { keepOpen: true }\n                            }\n                        );\n\n                        $(form).attr('data-address-mode', 'customer');\n                        var $rootEl = $(form).closest('.shipping-content');\n                        editMultiShipAddress($rootEl);\n                    })\n                    .fail(function () {\n                        $.spinner().stop();\n                    });\n            } else {\n                var updatePLIShipmentUrl = $(form).attr('action');\n                var serializedAddress = $(form).serialize();\n                createNewShipmentScoped(updatePLIShipmentUrl, serializedAddress)\n                    .done(function (response) {\n                        $.spinner().stop();\n                        if (response.error) {\n                            if (response.redirectUrl) {\n                                window.location.href = response.redirectUrl;\n                            }\n                            return;\n                        }\n\n                        $('body').trigger('checkout:updateCheckoutView',\n                            {\n                                order: response.order,\n                                customer: response.customer,\n                                options: { keepOpen: true }\n                            }\n                        );\n\n                        $(form).attr('data-address-mode', 'edit');\n                    })\n                    .fail(function () {\n                        $.spinner().stop();\n                    });\n            }\n        });\n    },\n\n    updateShippingList: function () {\n        var baseObj = this;\n\n        $('select[name$=\"shippingAddress_addressFields_states_stateCode\"]')\n            .on('change', function (e) {\n                if (baseObj.methods && baseObj.methods.updateShippingMethodList) {\n                    baseObj.methods.updateShippingMethodList($(e.currentTarget.form));\n                } else {\n                    updateShippingMethodList($(e.currentTarget.form));\n                }\n            });\n    },\n\n    updateDataAddressMode: function () {\n        $('body').on('shipping:updateDataAddressMode', function (e, data) {\n            $(data.form).attr('data-address-mode', data.mode);\n        });\n    },\n\n    enterMultiShipInfo: function () {\n        var baseObj = this;\n\n        $('.btn-enter-multi-ship').on('click', function (e) {\n            e.preventDefault();\n\n            if (baseObj.methods && baseObj.methods.editOrEnterMultiShipInfo) {\n                baseObj.methods.editOrEnterMultiShipInfo($(this), 'new');\n            } else {\n                editOrEnterMultiShipInfo($(this), 'new');\n            }\n        });\n    },\n\n    editMultiShipInfo: function () {\n        var baseObj = this;\n\n        $('.btn-edit-multi-ship').on('click', function (e) {\n            e.preventDefault();\n\n            if (baseObj.methods && baseObj.methods.editOrEnterMultiShipInfo) {\n                baseObj.methods.editOrEnterMultiShipInfo($(this), 'edit');\n            } else {\n                editOrEnterMultiShipInfo($(this), 'edit');\n            }\n        });\n    },\n\n    saveMultiShipInfo: function () {\n        var baseObj = this;\n\n        $('.btn-save-multi-ship').on('click', function (e) {\n            e.preventDefault();\n\n            // Save address to checkoutAddressBook\n            var form = $(this).closest('form');\n            var $rootEl = $(this).closest('.shipping-content');\n            var data = $(form).serialize();\n            var url = $(form).attr('action');\n\n            $rootEl.spinner().start();\n            $.ajax({\n                url: url,\n                type: 'post',\n                dataType: 'json',\n                data: data\n            })\n                .done(function (response) {\n                    formHelpers.clearPreviousErrors(form);\n                    if (response.error) {\n                        if (response.fieldErrors && response.fieldErrors.length) {\n                            response.fieldErrors.forEach(function (error) {\n                                if (Object.keys(error).length) {\n                                    formHelpers.loadFormErrors(form, error);\n                                }\n                            });\n                        } else if (response.serverErrors && response.serverErrors.length) {\n                            $.each(response.serverErrors, function (index, element) {\n                                createErrorNotification(element);\n                            });\n                        }\n                    } else {\n                        // Update UI from response\n                        $('body').trigger('checkout:updateCheckoutView',\n                            {\n                                order: response.order,\n                                customer: response.customer\n                            }\n                        );\n\n                        if (baseObj.methods && baseObj.methods.viewMultishipAddress) {\n                            baseObj.methods.viewMultishipAddress($rootEl);\n                        } else {\n                            viewMultishipAddress($rootEl);\n                        }\n                    }\n\n                    if (response.order && response.order.shippable) {\n                        $('button.submit-shipping').attr('disabled', null);\n                    }\n\n                    $rootEl.spinner().stop();\n                })\n                .fail(function (err) {\n                    if (err.responseJSON.redirectUrl) {\n                        window.location.href = err.responseJSON.redirectUrl;\n                    }\n\n                    $rootEl.spinner().stop();\n                });\n\n            return false;\n        });\n    },\n\n    cancelMultiShipAddress: function () {\n        var baseObj = this;\n\n        $('.btn-cancel-multi-ship-address').on('click', function (e) {\n            e.preventDefault();\n\n            var form = $(this).closest('form');\n            var $rootEl = $(this).closest('.shipping-content');\n            var restoreState = $rootEl.data('saved-state');\n\n            // Should clear out changes / restore previous state\n            if (restoreState) {\n                var restoreStateObj = JSON.parse(restoreState);\n                var originalStateCode = restoreStateObj.shippingAddress.stateCode;\n                var stateCode = $('[name$=_stateCode]', form).val();\n\n                if (baseObj.methods && baseObj.methods.updateShippingAddressFormValues) {\n                    baseObj.methods.updateShippingAddressFormValues(restoreStateObj);\n                } else {\n                    updateShippingAddressFormValues(restoreStateObj);\n                }\n\n                if (stateCode !== originalStateCode) {\n                    $('[data-action=save]', form).trigger('click');\n                } else {\n                    $(form).attr('data-address-mode', 'edit');\n                    if (baseObj.methods && baseObj.methods.editMultiShipAddress) {\n                        baseObj.methods.editMultiShipAddress($rootEl);\n                    } else {\n                        editMultiShipAddress($rootEl);\n                    }\n                }\n            }\n\n            return false;\n        });\n    },\n\n    isGift: function () {\n        $('.gift').on('change', function (e) {\n            e.preventDefault();\n            var form = $(this).closest('form');\n\n            if (this.checked) {\n                $(form).find('.gift-message').removeClass('d-none');\n            } else {\n                $(form).find('.gift-message').addClass('d-none');\n                $(form).find('.gift-message').val('');\n            }\n        });\n    }\n};\n\n\n//# sourceURL=webpack:///../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/shipping.js?");

/***/ }),

/***/ "../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/summary.js":
/*!***************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/summary.js ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * updates the totals summary\n * @param {Array} totals - the totals data\n */\nfunction updateTotals(totals) {\n    $('.shipping-total-cost').text(totals.totalShippingCost);\n    $('.tax-total').text(totals.totalTax);\n    $('.sub-total').text(totals.subTotal);\n    $('.grand-total-sum').text(totals.grandTotal);\n\n    if (totals.orderLevelDiscountTotal.value > 0) {\n        $('.order-discount').show();\n        $('.order-discount-total').text('- ' + totals.orderLevelDiscountTotal.formatted);\n    } else {\n        $('.order-discount').hide();\n    }\n\n    if (totals.shippingLevelDiscountTotal.value > 0) {\n        $('.shipping-discount').show();\n        $('.shipping-discount-total').text('- ' +\n            totals.shippingLevelDiscountTotal.formatted);\n    } else {\n        $('.shipping-discount').hide();\n    }\n}\n\n/**\n * updates the order product shipping summary for an order model\n * @param {Object} order - the order model\n */\nfunction updateOrderProductSummaryInformation(order) {\n    var $productSummary = $('<div />');\n    order.shipping.forEach(function (shipping) {\n        shipping.productLineItems.items.forEach(function (lineItem) {\n            var pli = $('[data-product-line-item=' + lineItem.UUID + ']');\n            $productSummary.append(pli);\n        });\n\n        var address = shipping.shippingAddress || {};\n        var selectedMethod = shipping.selectedShippingMethod;\n\n        var nameLine = address.firstName ? address.firstName + ' ' : '';\n        if (address.lastName) nameLine += address.lastName;\n\n        var address1Line = address.address1;\n        var address2Line = address.address2;\n\n        var phoneLine = address.phone;\n\n        var shippingCost = selectedMethod ? selectedMethod.shippingCost : '';\n        var methodNameLine = selectedMethod ? selectedMethod.displayName : '';\n        var methodArrivalTime = selectedMethod && selectedMethod.estimatedArrivalTime\n            ? '( ' + selectedMethod.estimatedArrivalTime + ' )'\n            : '';\n\n        var tmpl = $('#pli-shipping-summary-template').clone();\n\n        if (shipping.productLineItems.items && shipping.productLineItems.items.length > 1) {\n            $('h5 > span').text(' - ' + shipping.productLineItems.items.length + ' '\n                + order.resources.items);\n        } else {\n            $('h5 > span').text('');\n        }\n\n        var stateRequiredAttr = $('#shippingState').attr('required');\n        var isRequired = stateRequiredAttr !== undefined && stateRequiredAttr !== false;\n        var stateExists = (shipping.shippingAddress && shipping.shippingAddress.stateCode)\n            ? shipping.shippingAddress.stateCode\n            : false;\n        var stateBoolean = false;\n        if ((isRequired && stateExists) || (!isRequired)) {\n            stateBoolean = true;\n        }\n\n        var shippingForm = $('.multi-shipping input[name=\"shipmentUUID\"][value=\"' + shipping.UUID + '\"]').parent();\n\n        if (shipping.shippingAddress\n            && shipping.shippingAddress.firstName\n            && shipping.shippingAddress.address1\n            && shipping.shippingAddress.city\n            && stateBoolean\n            && shipping.shippingAddress.countryCode\n            && (shipping.shippingAddress.phone || shipping.productLineItems.items[0].fromStoreId)) {\n            $('.ship-to-name', tmpl).text(nameLine);\n            $('.ship-to-address1', tmpl).text(address1Line);\n            $('.ship-to-address2', tmpl).text(address2Line);\n            $('.ship-to-city', tmpl).text(address.city);\n            if (address.stateCode) {\n                $('.ship-to-st', tmpl).text(address.stateCode);\n            }\n            $('.ship-to-zip', tmpl).text(address.postalCode);\n            $('.ship-to-phone', tmpl).text(phoneLine);\n\n            if (!address2Line) {\n                $('.ship-to-address2', tmpl).hide();\n            }\n\n            if (!phoneLine) {\n                $('.ship-to-phone', tmpl).hide();\n            }\n\n            shippingForm.find('.ship-to-message').text('');\n        } else {\n            shippingForm.find('.ship-to-message').text(order.resources.addressIncomplete);\n        }\n\n        if (shipping.isGift) {\n            $('.gift-message-summary', tmpl).text(shipping.giftMessage);\n        } else {\n            $('.gift-summary', tmpl).addClass('d-none');\n        }\n\n        // checking h5 title shipping to or pickup\n        var $shippingAddressLabel = $('.shipping-header-text', tmpl);\n        $('body').trigger('shipping:updateAddressLabelText',\n            { selectedShippingMethod: selectedMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel });\n\n        if (shipping.selectedShippingMethod) {\n            $('.display-name', tmpl).text(methodNameLine);\n            $('.arrival-time', tmpl).text(methodArrivalTime);\n            $('.price', tmpl).text(shippingCost);\n        }\n\n        var $shippingSummary = $('<div class=\"multi-shipping\" data-shipment-summary=\"'\n            + shipping.UUID + '\" />');\n        $shippingSummary.html(tmpl.html());\n        $productSummary.append($shippingSummary);\n    });\n\n    $('.product-summary-block').html($productSummary.html());\n}\n\nmodule.exports = {\n    updateTotals: updateTotals,\n    updateOrderProductSummaryInformation: updateOrderProductSummaryInformation\n};\n\n\n//# sourceURL=webpack:///../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/summary.js?");

/***/ }),

/***/ "../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/components/cleave.js":
/*!****************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/components/cleave.js ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Cleave = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'cleave.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\nmodule.exports = {\n    handleCreditCardNumber: function (cardFieldSelector, cardTypeSelector) {\n        var cleave = new Cleave(cardFieldSelector, {\n            creditCard: true,\n            onCreditCardTypeChanged: function (type) {\n                var creditCardTypes = {\n                    visa: 'Visa',\n                    mastercard: 'Master Card',\n                    amex: 'Amex',\n                    discover: 'Discover',\n                    unknown: 'Unknown'\n                };\n\n                var cardType = creditCardTypes[Object.keys(creditCardTypes).indexOf(type) > -1\n                    ? type\n                    : 'unknown'];\n                $(cardTypeSelector).val(cardType);\n                $('.card-number-wrapper').attr('data-type', type);\n                if (type === 'visa' || type === 'mastercard' || type === 'discover') {\n                    $('#securityCode').attr('maxlength', 3);\n                } else {\n                    $('#securityCode').attr('maxlength', 4);\n                }\n            }\n        });\n\n        $(cardFieldSelector).data('cleave', cleave);\n    },\n\n    serializeData: function (form) {\n        var serializedArray = form.serializeArray();\n\n        serializedArray.forEach(function (item) {\n            if (item.name.indexOf('cardNumber') > -1) {\n                item.value = $('#cardNumber').data('cleave').getRawValue(); // eslint-disable-line\n            }\n        });\n\n        return $.param(serializedArray);\n    }\n};\n\n\n//# sourceURL=webpack:///../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/components/cleave.js?");

/***/ }),

/***/ "../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js":
/*!***********************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js ***!
  \***********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (element) {\n    var position = element && element.length ? element.offset().top : 0;\n    $('html, body').animate({\n        scrollTop: position\n    }, 500);\n    if (!element) {\n        $('.logo-home').focus();\n    }\n};\n\n\n//# sourceURL=webpack:///../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js?");

/***/ }),

/***/ "../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/util.js":
/*!***************************************************************************************************************!*\
  !*** ../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/util.js ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (include) {\n    if (typeof include === 'function') {\n        include();\n    } else if (typeof include === 'object') {\n        Object.keys(include).forEach(function (key) {\n            if (typeof include[key] === 'function') {\n                include[key]();\n            }\n        });\n    }\n};\n\n\n//# sourceURL=webpack:///../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/util.js?");

/***/ }),

/***/ "./cartridges/int_adyen_SFRA/cartridge/client/default/js/adyenCheckout.js":
/*!********************************************************************************!*\
  !*** ./cartridges/int_adyen_SFRA/cartridge/client/default/js/adyenCheckout.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// eslint-disable-next-line no-unused-vars\nvar maskedCardNumber;\nvar MASKED_CC_PREFIX = '************';\nvar selectedMethod;\nvar componentsObj = {};\nvar checkoutConfiguration = window.Configuration;\nvar formErrorsExist;\nvar isValid = false;\nvar checkout;\n$('#dwfrm_billing').submit(function (e) {\n  e.preventDefault();\n  var form = $(this);\n  var url = form.attr('action');\n  $.ajax({\n    type: 'POST',\n    url: url,\n    data: form.serialize(),\n    async: false,\n    success: function success(data) {\n      formErrorsExist = 'fieldErrors' in data;\n    }\n  });\n});\n\ncheckoutConfiguration.onChange = function (state) {\n  var type = state.data.paymentMethod.type;\n  isValid = state.isValid;\n\n  if (!componentsObj[type]) {\n    componentsObj[type] = {};\n  }\n\n  componentsObj[type].isValid = isValid;\n  componentsObj[type].stateData = state.data;\n};\n\ncheckoutConfiguration.showPayButton = false;\ncheckoutConfiguration.paymentMethodsConfiguration = {\n  card: {\n    enableStoreDetails: showStoreDetails,\n    onBrand: function onBrand(brandObject) {\n      document.querySelector('#cardType').value = brandObject.brand;\n    },\n    onFieldValid: function onFieldValid(data) {\n      if (data.endDigits) {\n        maskedCardNumber = MASKED_CC_PREFIX + data.endDigits;\n        document.querySelector('#cardNumber').value = maskedCardNumber;\n      }\n    },\n    onChange: function onChange(state) {\n      isValid = state.isValid;\n      var componentName = state.data.paymentMethod.storedPaymentMethodId ? \"storedCard\".concat(state.data.paymentMethod.storedPaymentMethodId) : state.data.paymentMethod.type;\n\n      if (componentName === selectedMethod) {\n        componentsObj[selectedMethod].isValid = isValid;\n        componentsObj[selectedMethod].stateData = state.data;\n      }\n    }\n  },\n  boletobancario: {\n    personalDetailsRequired: true,\n    // turn personalDetails section on/off\n    billingAddressRequired: false,\n    // turn billingAddress section on/off\n    showEmailAddress: false,\n    // allow shopper to specify their email address\n    // Optionally prefill some fields, here all fields are filled:\n    data: {\n      firstName: document.getElementById('shippingFirstNamedefault').value,\n      lastName: document.getElementById('shippingLastNamedefault').value\n    }\n  },\n  paywithgoogle: {\n    environment: window.Configuration.environment,\n    onSubmit: () => {\n      assignPaymentMethodValue();\n      document.querySelector('button[value=\"submit-payment\"]').disabled = false;\n      document.querySelector('button[value=\"submit-payment\"]').click();\n    },\n    configuration: {\n      gatewayMerchantId: window.merchantAccount\n    },\n    showPayButton: true,\n    buttonColor: 'white'\n  },\n  paypal: {\n    environment: window.Configuration.environment,\n    intent: 'capture',\n    onSubmit: (state, component) => {\n      assignPaymentMethodValue();\n      document.querySelector('#adyenStateData').value = JSON.stringify(componentsObj[selectedMethod].stateData);\n      paymentFromComponent(state.data, component);\n    },\n    onCancel: (data, component) => {\n      paymentFromComponent({\n        cancelTransaction: true\n      }, component);\n    },\n    onError: (error, component) => {\n      if (component) {\n        component.setStatus('ready');\n      }\n\n      document.querySelector('#showConfirmationForm').submit();\n    },\n    onAdditionalDetails: state => {\n      document.querySelector('#additionalDetailsHidden').value = JSON.stringify(state.data);\n      document.querySelector('#showConfirmationForm').submit();\n    },\n    onClick: (data, actions) => {\n      $('#dwfrm_billing').trigger('submit');\n\n      if (formErrorsExist) {\n        return actions.reject();\n      }\n    }\n  },\n  afterpay_default: {\n    visibility: {\n      personalDetails: 'editable',\n      billingAddress: 'hidden',\n      deliveryAddress: 'hidden'\n    },\n    data: {\n      personalDetails: {\n        firstName: document.querySelector('#shippingFirstNamedefault').value,\n        lastName: document.querySelector('#shippingLastNamedefault').value,\n        telephoneNumber: document.querySelector('#shippingPhoneNumberdefault').value,\n        shopperEmail: document.querySelector('#email').value\n      }\n    }\n  },\n  facilypay_3x: {\n    visibility: {\n      personalDetails: 'editable',\n      billingAddress: 'hidden',\n      deliveryAddress: 'hidden'\n    },\n    data: {\n      personalDetails: {\n        firstName: document.querySelector('#shippingFirstNamedefault').value,\n        lastName: document.querySelector('#shippingLastNamedefault').value,\n        telephoneNumber: document.querySelector('#shippingPhoneNumberdefault').value,\n        shopperEmail: document.querySelector('#email').value\n      }\n    }\n  }\n};\n\nif (window.installments) {\n  try {\n    var installments = JSON.parse(window.installments);\n    checkoutConfiguration.paymentMethodsConfiguration.card.installments = installments;\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nif (window.paypalMerchantID !== 'null') {\n  checkoutConfiguration.paymentMethodsConfiguration.paypal.merchantId = window.paypalMerchantID;\n}\n\nif (window.googleMerchantID !== 'null' && window.Configuration.environment === 'LIVE') {\n  checkoutConfiguration.paymentMethodsConfiguration.paywithgoogle.merchantIdentifier = window.googleMerchantID;\n}\n/**\n * Changes the \"display\" attribute of the selected method from hidden to visible\n */\n\n\nfunction displaySelectedMethod(type) {\n  selectedMethod = type;\n  resetPaymentMethod();\n\n  if (['paypal', 'paywithgoogle'].indexOf(type) > -1) {\n    document.querySelector('button[value=\"submit-payment\"]').disabled = true;\n  } else {\n    document.querySelector('button[value=\"submit-payment\"]').disabled = false;\n  }\n\n  document.querySelector(\"#component_\".concat(type)).setAttribute('style', 'display:block');\n}\n/**\n * To avoid re-rendering components twice, unmounts existing components from payment methods list\n */\n\n\nfunction unmountComponents() {\n  var promises = Object.entries(componentsObj).map(function (_ref) {\n    var [key, val] = _ref;\n    delete componentsObj[key];\n    return resolveUnmount(key, val);\n  });\n  return Promise.all(promises);\n}\n\nfunction resolveUnmount(key, val) {\n  try {\n    return Promise.resolve(val.node.unmount(\"component_\".concat(key)));\n  } catch (e) {\n    // try/catch block for val.unmount\n    return Promise.resolve(false);\n  }\n}\n/**\n * checks if payment method is blocked and returns a boolean accordingly\n */\n\n\nfunction isMethodTypeBlocked(methodType) {\n  var blockedMethods = ['bcmc_mobile_QR', 'applepay', 'cup', 'wechatpay', 'wechatpay_pos', 'wechatpaySdk', 'wechatpayQr'];\n  return blockedMethods.includes(methodType);\n}\n/**\n * Calls getPaymenMethods and then renders the retrieved payment methods (including card component)\n */\n\n\nfunction renderGenericComponent() {\n  return _renderGenericComponent.apply(this, arguments);\n}\n\nfunction _renderGenericComponent() {\n  _renderGenericComponent = _asyncToGenerator(function* () {\n    if (Object.keys(componentsObj).length !== 0) {\n      yield unmountComponents();\n    }\n\n    getPaymentMethods(function (data) {\n      var paymentMethod;\n      var i;\n      checkoutConfiguration.paymentMethodsResponse = data.AdyenPaymentMethods;\n\n      if (data.amount) {\n        checkoutConfiguration.amount = data.amount;\n      }\n\n      if (data.countryCode) {\n        checkoutConfiguration.countryCode = data.countryCode;\n      }\n\n      checkout = new AdyenCheckout(checkoutConfiguration);\n      document.querySelector('#paymentMethodsList').innerHTML = '';\n\n      if (data.AdyenPaymentMethods.storedPaymentMethods) {\n        for (i = 0; i < checkout.paymentMethodsResponse.storedPaymentMethods.length; i++) {\n          paymentMethod = checkout.paymentMethodsResponse.storedPaymentMethods[i];\n\n          if (paymentMethod.supportedShopperInteractions.includes('Ecommerce')) {\n            renderPaymentMethod(paymentMethod, true, data.ImagePath);\n          }\n        }\n      }\n\n      data.AdyenPaymentMethods.paymentMethods.forEach((pm, i) => {\n        !isMethodTypeBlocked(pm.type) && renderPaymentMethod(pm, false, data.ImagePath, data.AdyenDescriptions[i].description);\n      });\n\n      if (data.AdyenConnectedTerminals && data.AdyenConnectedTerminals.uniqueTerminalIds && data.AdyenConnectedTerminals.uniqueTerminalIds.length > 0) {\n        var posTerminals = document.querySelector('#adyenPosTerminals');\n\n        while (posTerminals.firstChild) {\n          posTerminals.removeChild(posTerminals.firstChild);\n        }\n\n        addPosTerminals(data.AdyenConnectedTerminals.uniqueTerminalIds);\n      }\n\n      var firstPaymentMethod = document.querySelector('input[type=radio][name=brandCode]');\n      firstPaymentMethod.checked = true;\n      displaySelectedMethod(firstPaymentMethod.value);\n    });\n  });\n  return _renderGenericComponent.apply(this, arguments);\n}\n\nfunction renderPaymentMethod(paymentMethod, storedPaymentMethodBool, path) {\n  var description = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var node;\n  var paymentMethodsUI = document.querySelector('#paymentMethodsList');\n  var li = document.createElement('li');\n  var paymentMethodID = storedPaymentMethodBool ? \"storedCard\".concat(paymentMethod.id) : paymentMethod.type;\n  var isSchemeNotStored = paymentMethod.type === 'scheme' && !storedPaymentMethodBool;\n  var paymentMethodImage = storedPaymentMethodBool ? \"\".concat(path).concat(paymentMethod.brand, \".png\") : \"\".concat(path).concat(paymentMethod.type, \".png\");\n  var cardImage = \"\".concat(path, \"card.png\");\n  var imagePath = isSchemeNotStored ? cardImage : paymentMethodImage;\n  var label = storedPaymentMethodBool ? \"\".concat(paymentMethod.name, \" \").concat(MASKED_CC_PREFIX).concat(paymentMethod.lastFour) : \"\".concat(paymentMethod.name);\n  var liContents = \"\\n                              <input name=\\\"brandCode\\\" type=\\\"radio\\\" value=\\\"\".concat(paymentMethodID, \"\\\" id=\\\"rb_\").concat(paymentMethodID, \"\\\">\\n                              <img class=\\\"paymentMethod_img\\\" src=\\\"\").concat(imagePath, \"\\\" ></img>\\n                              <label id=\\\"lb_\").concat(paymentMethodID, \"\\\" for=\\\"rb_\").concat(paymentMethodID, \"\\\">\").concat(label, \"</label>\\n                             \");\n\n  if (description) {\n    liContents += \"<p>\".concat(description, \"</p>\");\n  }\n\n  var container = document.createElement('div');\n  li.innerHTML = liContents;\n  li.classList.add('paymentMethod');\n\n  if (storedPaymentMethodBool) {\n    node = checkout.create('card', paymentMethod);\n\n    if (!componentsObj[paymentMethodID]) {\n      componentsObj[paymentMethodID] = {};\n    }\n\n    componentsObj[paymentMethodID].node = node;\n  } else {\n    var fallback = getFallback(paymentMethod.type);\n\n    if (fallback) {\n      var template = document.createElement('template');\n      template.innerHTML = fallback;\n      container.append(template.content);\n    } else {\n      try {\n        node = checkout.create(paymentMethod.type);\n\n        if (!componentsObj[paymentMethodID]) {\n          componentsObj[paymentMethodID] = {};\n        }\n\n        componentsObj[paymentMethodID].node = node;\n      } catch (e) {} // eslint-disable-line no-empty\n\n    }\n  }\n\n  container.classList.add('additionalFields');\n  container.setAttribute('id', \"component_\".concat(paymentMethodID));\n  container.setAttribute('style', 'display:none');\n  li.append(container);\n  paymentMethodsUI.append(li);\n\n  if (paymentMethod.type !== 'paywithgoogle') {\n    node && node.mount(container);\n  } else {\n    node.isAvailable().then(() => {\n      node.mount(container);\n    }).catch(() => {}); // eslint-disable-line no-empty\n  }\n\n  var input = document.querySelector(\"#rb_\".concat(paymentMethodID));\n\n  input.onchange = event => {\n    displaySelectedMethod(event.target.value);\n  };\n\n  if (componentsObj[paymentMethodID] && !container.childNodes[0]) {\n    componentsObj[paymentMethodID].isValid = true;\n  }\n} // eslint-disable-next-line no-unused-vars\n\n\nfunction addPosTerminals(terminals) {\n  var terminalSelect = document.createElement('select');\n  terminalSelect.id = 'terminalList';\n\n  for (var t in terminals) {\n    var option = document.createElement('option');\n    option.value = terminals[t];\n    option.text = terminals[t];\n    terminalSelect.appendChild(option);\n  }\n\n  document.querySelector('#adyenPosTerminals').append(terminalSelect);\n}\n\nfunction resetPaymentMethod() {\n  $('#requiredBrandCode').hide();\n  $('#selectedIssuer').val('');\n  $('#adyenIssuerName').val('');\n  $('#dateOfBirth').val('');\n  $('#telephoneNumber').val('');\n  $('#gender').val('');\n  $('#bankAccountOwnerName').val('');\n  $('#bankAccountNumber').val('');\n  $('#bankLocationId').val('');\n  $('.additionalFields').hide();\n}\n/**\n * Makes an ajax call to the controller function GetPaymentMethods\n */\n\n\nfunction getPaymentMethods(paymentMethods) {\n  $.ajax({\n    url: 'Adyen-GetPaymentMethods',\n    type: 'get',\n    success: function success(data) {\n      paymentMethods(data);\n    }\n  });\n}\n/**\n * Makes an ajax call to the controller function PaymentFromComponent. Used by certain payment methods like paypal\n */\n\n\nfunction paymentFromComponent(data, component) {\n  $.ajax({\n    url: 'Adyen-PaymentFromComponent',\n    type: 'post',\n    data: {\n      data: JSON.stringify(data),\n      paymentMethod: document.querySelector('#adyenPaymentMethodName').value\n    },\n    success: function success(data) {\n      if (data.fullResponse && data.fullResponse.action) {\n        component.handleAction(data.fullResponse.action);\n      } else {\n        document.querySelector('#showConfirmationForm').submit();\n      }\n    }\n  }).fail(function () {});\n} // Submit the payment\n\n\n$('button[value=\"submit-payment\"]').on('click', function () {\n  if (document.querySelector('#selectedPaymentOption').value === 'AdyenPOS') {\n    document.querySelector('#terminalId').value = document.querySelector('#terminalList').value;\n    return true;\n  }\n\n  assignPaymentMethodValue();\n  validateComponents();\n  return showValidation();\n});\n\nfunction assignPaymentMethodValue() {\n  var adyenPaymentMethod = document.querySelector('#adyenPaymentMethodName');\n  adyenPaymentMethod.value = document.querySelector(\"#lb_\".concat(selectedMethod)).innerHTML;\n}\n\nfunction showValidation() {\n  var input;\n\n  if (componentsObj[selectedMethod] && !componentsObj[selectedMethod].isValid) {\n    componentsObj[selectedMethod].node.showValidation();\n    return false;\n  }\n\n  if (selectedMethod === 'ach') {\n    var inputs = document.querySelectorAll('#component_ach > input');\n    inputs = Object.values(inputs).filter(function (input) {\n      return !(input.value && input.value.length > 0);\n    });\n\n    for (input of inputs) {\n      input.classList.add('adyen-checkout__input--error');\n    }\n\n    if (inputs.length > 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  if (selectedMethod === 'ratepay') {\n    input = document.querySelector('#dateOfBirthInput');\n\n    if (!(input.value && input.value.length > 0)) {\n      input.classList.add('adyen-checkout__input--error');\n      return false;\n    }\n\n    return true;\n  }\n\n  return true;\n}\n\nfunction validateCustomInputField(input) {\n  if (input.value === '') {\n    input.classList.add('adyen-checkout__input--error');\n  } else if (input.value.length > 0) {\n    input.classList.remove('adyen-checkout__input--error');\n  }\n}\n/**\n * Assigns stateData value to the hidden stateData input field so it's sent to the backend for processing\n */\n\n\nfunction validateComponents() {\n  if (document.querySelector('#component_ach')) {\n    var inputs = document.querySelectorAll('#component_ach > input');\n\n    for (var input of inputs) {\n      input.onchange = function () {\n        validateCustomInputField(this);\n      };\n    }\n  }\n\n  if (document.querySelector('#dateOfBirthInput')) {\n    document.querySelector('#dateOfBirthInput').onchange = function () {\n      validateCustomInputField(this);\n    };\n  }\n\n  var stateData;\n\n  if (componentsObj[selectedMethod] && componentsObj[selectedMethod].stateData) {\n    stateData = componentsObj[selectedMethod].stateData;\n  } else {\n    stateData = {\n      paymentMethod: {\n        type: selectedMethod\n      }\n    };\n  }\n\n  if (selectedMethod === 'ach') {\n    var bankAccount = {\n      ownerName: document.querySelector('#bankAccountOwnerNameValue').value,\n      bankAccountNumber: document.querySelector('#bankAccountNumberValue').value,\n      bankLocationId: document.querySelector('#bankLocationIdValue').value\n    };\n    stateData.paymentMethod = _objectSpread(_objectSpread({}, stateData.paymentMethod), {}, {\n      bankAccount: bankAccount\n    });\n  } else if (selectedMethod === 'ratepay') {\n    if (document.querySelector('#genderInput').value && document.querySelector('#dateOfBirthInput').value) {\n      stateData.shopperName = {\n        gender: document.querySelector('#genderInput').value\n      };\n      stateData.dateOfBirth = document.querySelector('#dateOfBirthInput').value;\n    }\n  }\n\n  document.querySelector('#adyenStateData').value = JSON.stringify(stateData);\n}\n/**\n * Contains fallback components for payment methods that don't have an Adyen web component yet\n */\n\n\nfunction getFallback(paymentMethod) {\n  var ach = \"<div id=\\\"component_ach\\\">\\n                    <span class=\\\"adyen-checkout__label\\\">Bank Account Owner Name</span>\\n                    <input type=\\\"text\\\" id=\\\"bankAccountOwnerNameValue\\\" class=\\\"adyen-checkout__input\\\">\\n                    <span class=\\\"adyen-checkout__label\\\">Bank Account Number</span>\\n                    <input type=\\\"text\\\" id=\\\"bankAccountNumberValue\\\" class=\\\"adyen-checkout__input\\\" maxlength=\\\"17\\\" >\\n                    <span class=\\\"adyen-checkout__label\\\">Routing Number</span>\\n                    <input type=\\\"text\\\" id=\\\"bankLocationIdValue\\\" class=\\\"adyen-checkout__input\\\" maxlength=\\\"9\\\" >\\n                 </div>\";\n  var ratepay = \"<span class=\\\"adyen-checkout__label\\\">Gender</span>\\n                    <select id=\\\"genderInput\\\" class=\\\"adyen-checkout__input\\\">\\n                        <option value=\\\"MALE\\\">Male</option>\\n                        <option value=\\\"FEMALE\\\">Female</option>\\n                    </select>\\n                    <span class=\\\"adyen-checkout__label\\\">Date of birth</span>\\n                    <input id=\\\"dateOfBirthInput\\\" class=\\\"adyen-checkout__input\\\" type=\\\"date\\\"/>\";\n  var fallback = {\n    ach: ach,\n    ratepay: ratepay\n  };\n  return fallback[paymentMethod];\n}\n\nmodule.exports = {\n  methods: {\n    renderGenericComponent: renderGenericComponent\n  }\n};\n\n//# sourceURL=webpack:///./cartridges/int_adyen_SFRA/cartridge/client/default/js/adyenCheckout.js?");

/***/ }),

/***/ "./cartridges/int_adyen_SFRA/cartridge/client/default/js/checkout.js":
/*!***************************************************************************!*\
  !*** ./cartridges/int_adyen_SFRA/cartridge/client/default/js/checkout.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar processInclude = __webpack_require__(/*! base/util */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/util.js\");\n\nvar adyenCheckout = __webpack_require__(/*! ./adyenCheckout */ \"./cartridges/int_adyen_SFRA/cartridge/client/default/js/adyenCheckout.js\");\n\n$(document).ready(function () {\n  // eslint-disable-line\n  var name = 'paymentError';\n  var error = new RegExp(\"[?&]\".concat(encodeURIComponent(name), \"=([^&]*)\")).exec(location.search // eslint-disable-line no-restricted-globals\n  );\n  var paymentStage = new RegExp('[?&]stage=payment([^&]*)').exec(location.search // eslint-disable-line no-restricted-globals\n  );\n\n  if (error || paymentStage) {\n    if (error) {\n      $('.error-message').show();\n      $('.error-message-text').text(decodeURIComponent(error[1]));\n    }\n\n    adyenCheckout.methods.renderGenericComponent();\n  }\n\n  processInclude(__webpack_require__(/*! base/checkout/checkout */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/checkout.js\"));\n  processInclude(__webpack_require__(/*! ./checkout/billing */ \"./cartridges/int_adyen_SFRA/cartridge/client/default/js/checkout/billing.js\"));\n  processInclude(__webpack_require__(/*! ./checkout/checkout */ \"./cartridges/int_adyen_SFRA/cartridge/client/default/js/checkout/checkout.js\"));\n  $('#selectedPaymentOption').val($('.payment-options .nav-item .active').parent().attr('data-method-id'));\n});\n$('.payment-options .nav-link').click(function () {\n  $('#selectedPaymentOption').val($(this).parent().attr('data-method-id'));\n});\n\n//# sourceURL=webpack:///./cartridges/int_adyen_SFRA/cartridge/client/default/js/checkout.js?");

/***/ }),

/***/ "./cartridges/int_adyen_SFRA/cartridge/client/default/js/checkout/billing.js":
/*!***********************************************************************************!*\
  !*** ./cartridges/int_adyen_SFRA/cartridge/client/default/js/checkout/billing.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Updates the payment information in checkout, based on the supplied order model\n * @param {Object} order - checkout model to use as basis of new truth\n */\nfunction updatePaymentInformation(order) {\n  // update payment details\n  var $paymentSummary = $('.payment-details');\n  var htmlToAppend = '';\n\n  if (order.billing.payment && order.billing.payment.selectedPaymentInstruments && order.billing.payment.selectedPaymentInstruments.length > 0) {\n    var selectedPaymentInstrument = order.billing.payment.selectedPaymentInstruments[0];\n\n    if (selectedPaymentInstrument.selectedAdyenPM) {\n      htmlToAppend += \"<div><span>\".concat(selectedPaymentInstrument.selectedAdyenPM, \"</span></div>\");\n    }\n\n    if (selectedPaymentInstrument.selectedIssuerName) {\n      htmlToAppend += \"<div><span>\".concat(selectedPaymentInstrument.selectedIssuerName, \"</span></div>\");\n    }\n\n    if (selectedPaymentInstrument.maskedCreditCardNumber) {\n      htmlToAppend += \"<div>\".concat(selectedPaymentInstrument.maskedCreditCardNumber, \"</div>\");\n    }\n\n    if (selectedPaymentInstrument.expirationMonth && selectedPaymentInstrument.expirationYear) {\n      htmlToAppend += \"<div><span>\".concat(order.resources.cardEnding, \" \").concat(selectedPaymentInstrument.expirationMonth, \"/\").concat(selectedPaymentInstrument.expirationYear, \"</span></div>\");\n    }\n  }\n\n  $paymentSummary.empty().append(htmlToAppend);\n}\n\nmodule.exports = {\n  methods: {\n    updatePaymentInformation: updatePaymentInformation\n  }\n};\n\n//# sourceURL=webpack:///./cartridges/int_adyen_SFRA/cartridge/client/default/js/checkout/billing.js?");

/***/ }),

/***/ "./cartridges/int_adyen_SFRA/cartridge/client/default/js/checkout/checkout.js":
/*!************************************************************************************!*\
  !*** ./cartridges/int_adyen_SFRA/cartridge/client/default/js/checkout/checkout.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar shippingHelpers = __webpack_require__(/*! base/checkout/shipping */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/shipping.js\");\n\nvar billingHelpers = __webpack_require__(/*! base/checkout/billing */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/billing.js\");\n\nvar summaryHelpers = __webpack_require__(/*! base/checkout/summary */ \"../storefront-reference-architecture/cartridges/app_storefront_base/cartridge/client/default/js/checkout/summary.js\");\n\nvar billing = __webpack_require__(/*! ./billing */ \"./cartridges/int_adyen_SFRA/cartridge/client/default/js/checkout/billing.js\");\n\nvar adyenCheckout = __webpack_require__(/*! ../adyenCheckout */ \"./cartridges/int_adyen_SFRA/cartridge/client/default/js/adyenCheckout.js\");\n\nmodule.exports = {\n  updateCheckoutView: function updateCheckoutView() {\n    $('body').on('checkout:updateCheckoutView', function (e, data) {\n      shippingHelpers.methods.updateMultiShipInformation(data.order);\n      summaryHelpers.updateTotals(data.order.totals);\n      data.order.shipping.forEach(function (shipping) {\n        shippingHelpers.methods.updateShippingInformation(shipping, data.order, data.customer, data.options);\n      });\n      var currentStage = location.search.substring( // eslint-disable-line no-restricted-globals\n      location.search.indexOf('=') + 1 // eslint-disable-line no-restricted-globals\n      );\n\n      if (currentStage === 'shipping') {\n        adyenCheckout.methods.renderGenericComponent();\n      }\n\n      billingHelpers.methods.updateBillingInformation(data.order, data.customer, data.options);\n      billing.methods.updatePaymentInformation(data.order, data.options);\n      summaryHelpers.updateOrderProductSummaryInformation(data.order, data.options);\n    });\n  }\n};\n\n//# sourceURL=webpack:///./cartridges/int_adyen_SFRA/cartridge/client/default/js/checkout/checkout.js?");

/***/ })

/******/ });