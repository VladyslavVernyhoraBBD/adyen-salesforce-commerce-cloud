"use strict";

var _stripAnsi = _interopRequireDefault(require("strip-ansi"));

var _formatResults = _interopRequireDefault(require("../format-results"));

var _mockResultFactory = _interopRequireDefault(require("./mock-result-factory"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.unmock('yargs');

var argv = function argv() {
  var prop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return ['eslint', '-f', './index.js', '.', '--', '--sort-by', `${prop}`, direction === 'desc' ? '--desc' : '--asc'];
};

test('provides header, summary of rules and total', function () {
  var results = [(0, _mockResultFactory.default)([['rule1', 1], ['rule2', 1]]), (0, _mockResultFactory.default)([['rule2', 1], ['rule3', 2]]), (0, _mockResultFactory.default)([['rule3', 2], ['rule4', 2], ['rule5', 2]])];
  expect((0, _stripAnsi.default)((0, _formatResults.default)(results, argv()))).toMatchSnapshot();
});
test('can sort summary by rule id', function () {
  var results = [(0, _mockResultFactory.default)([['rule2', 1], ['rule3', 2]]), (0, _mockResultFactory.default)([['rule1', 1], ['rule2', 1]])];
  expect((0, _stripAnsi.default)((0, _formatResults.default)(results, argv('rule')))).toMatchSnapshot();
  expect((0, _stripAnsi.default)((0, _formatResults.default)(results, argv('rule', 'desc')))).toMatchSnapshot();
});
test('can sort summary by num of errors', function () {
  var results = [(0, _mockResultFactory.default)([['rule2', 2], ['rule3', 2]]), (0, _mockResultFactory.default)([['rule1', 1], ['rule2', 2]])];
  expect((0, _stripAnsi.default)((0, _formatResults.default)(results, argv('errors')))).toMatchSnapshot();
  expect((0, _stripAnsi.default)((0, _formatResults.default)(results, argv('errors', 'desc')))).toMatchSnapshot();
});
test('can sort summary by num of warnings', function () {
  var results = [(0, _mockResultFactory.default)([['rule2', 1], ['rule3', 2]]), (0, _mockResultFactory.default)([['rule1', 1], ['rule2', 1]])];
  expect((0, _stripAnsi.default)((0, _formatResults.default)(results, argv('warnings')))).toMatchSnapshot();
  expect((0, _stripAnsi.default)((0, _formatResults.default)(results, argv('warnings', 'desc')))).toMatchSnapshot();
});